<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2020/10/25/Golang/%E5%87%BD%E6%95%B0/"/>
    <url>/2020/10/25/Golang/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 26 2020 10:02:29 GMT+0800 (CST) --><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="Printf"><a href="#Printf" class="headerlink" title="Printf"></a>Printf</h2><blockquote><p>Printf的第一个参数是一个字符串，用于格式化输出。它的大部分格式与字符串中显示的格式完全相同。但是，任何百分号（%）都将被视为格式化动词的开始，字符串的一部分将被特定格式的值所替换。其余的参数用作这些动词的值。</p><p>百分号后面的字母表示要使用哪个动词。最常见的动词是：</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025225140557.png" srcset="/img/loading.gif" alt="image-20201025225140557"></p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;fmt.Printf(<span class="hljs-string">"a float %f\n"</span>,<span class="hljs-number">3.14</span>)fmt.Printf(<span class="hljs-string">"an intger %d\n"</span>,<span class="hljs-number">3</span>)fmt.Printf(<span class="hljs-string">"a string %s\n"</span>,<span class="hljs-string">"Hello"</span>)fmt.Printf(<span class="hljs-string">"a bool %t\n"</span>,<span class="hljs-literal">true</span>)fmt.Printf(<span class="hljs-string">"values:%v %v %v\n"</span>,<span class="hljs-number">123</span>,<span class="hljs-string">"\t"</span>,<span class="hljs-literal">true</span>)fmt.Printf(<span class="hljs-string">"Values:%T %T %T\n"</span>,<span class="hljs-number">123</span>,<span class="hljs-string">"\t"</span>,<span class="hljs-literal">true</span>)fmt.Printf(<span class="hljs-string">"Percevt sign: %%\n"</span>)&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025133812656.png" srcset="/img/loading.gif" alt="image-20201025133812656"></p><p>特别指出%#v格式化动词。因为它以Go代码中的显示方式而不是通常的显示方式来打印值，%#v可以显示一些值，如果不使用%#v的话，这些值可能会在输出中被隐藏，例如，在这段代码中，%#v显示了一个空字符串、一个制表符和一个换行符，所有这些在用%v打印时都是不可见的。在本书的后面，我们将更多地使用%#v！</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025133950639.png" srcset="/img/loading.gif" alt="image-20201025133950639"></p></blockquote><hr><h2 id="声明自己的函数"><a href="#声明自己的函数" class="headerlink" title="声明自己的函数"></a>声明自己的函数</h2><blockquote><ul><li><p>一个简单的函数声明看起来是这样的：</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025134146147.png" srcset="/img/loading.gif" alt="image-20201025134146147"></p><p>声明以func关键字开头，后跟希望函数具有的名称、一对圆括（），然后是包含函数代码的块。</p></li></ul><hr><ul><li><p>一旦声明了一个函数，你就可以在包的其他地方调用它</p><p>输入它的名称，后面跟着一对圆括号。当你执行此操作时，函数块中的代码将会运行。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHi</span><span class="hljs-params">()</span></span>  &#123;fmt.Printf(<span class="hljs-string">"Hi"</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;sayHi()&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025134612930.png" srcset="/img/loading.gif" alt="image-20201025134612930"></p></li></ul><hr><ul><li><p>函数名的规则与变量名的规则相同：</p></li><li><ul><li>名称必须以字母开头，后跟任何数量的附加字母和数字。（如果违反此规则，将出现编译错误。）</li><li>名称以大写字母开头的函数是可导出的，并且可以在当前包之外使用。如果只需要在当前包中使用函数，则应该以小写字母开头。</li><li>包含多个单词的名称应该使用驼峰式大小写。</li></ul><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025141229752.png" srcset="/img/loading.gif" alt="image-20201025141229752"></p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025141244690.png" srcset="/img/loading.gif" alt="image-20201025141244690"></p></li></ul><hr><h3 id="声明函数参数"><a href="#声明函数参数" class="headerlink" title="声明函数参数"></a>声明函数参数</h3><ul><li><p>如果希望对函数的调用包含参数，则需要声明一个或多个参数。参数是函数的局部变量，其值是在调用函数时设置的。</p></li><li><p>你可以在函数声明中的圆括号之间声明一个或多个参数，用逗号分隔。与任何变量一样，你需要为声明的每个参数提供一个名称，后面跟着一个类型（float64、bool等）。</p></li><li><p>如果函数定义了参数，那么在调用它时需要传递一组匹配的参数。当函数运行时，每个参数都将被设置为对应参数中值的副本。然后这些参数值在函数块的代码中被使用。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025141432605.png" srcset="/img/loading.gif" alt="image-20201025141432605"></p></li><li><p>参数是函数的局部变量，其值在调用函数时被设置。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025141501855.png" srcset="/img/loading.gif" alt=""></p></li></ul><hr><h3 id="函数和变量的作用域"><a href="#函数和变量的作用域" class="headerlink" title="函数和变量的作用域"></a>函数和变量的作用域</h3><blockquote><ul><li><p>条件块和循环块一样，函数块中声明的变量只在该函数块的作用域内。因此，如果我们试图从paintNeeded函数的外部访问area变量，我们会收到一个编译错误：</p></li><li><p>但是，与条件块和循环块一样，在函数块外部声明的变量将在该函数块的作用域内。这意味着我们可以在包级别上声明一个变量，并且可以在该包中的任何函数内访问它。</p></li></ul></blockquote><hr><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><blockquote><p>函数总是返回特定类型的值（并且只返回该类型）。若要声明函数返回值，请在函数声明中的参数后面添加该返回值的类型。然后在函数块中使用return关键字，后面跟着要返回的值。</p></blockquote><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025143527130.png" srcset="/img/loading.gif" alt="image-20201025143527130"></p><blockquote><p>然后，函数的调用者可以将返回值分配给一个变量，直接将它传递给另一个函数，或者用它做任何其他需要做的事情。</p></blockquote><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201025143636541.png" srcset="/img/loading.gif" alt="image-20201025143636541"></p><blockquote><p>Go要求声明了返回类型的任何函数都必须以return语句结束，从而帮助你检测这种情况。以任何其他语句结束将导致编译错误。</p><p>如果返回值的类型与声明的返回类型不匹配，你也会收到一个编译错误。</p></blockquote><hr><h3 id="错误值"><a href="#错误值" class="headerlink" title="错误值"></a>错误值</h3><blockquote><p>在可以从paintNeeded函数返回错误值之前，我们需要返回一个错误值。一个错误值是一个可以返回字符串的名为Error的方法返回的任何值。创建错误值的最简单方法是将字符串传递给errors包的New函数，该函数将返回一个新的错误值。如果对该错误值调用Error方法，将会得到传递给errors.New的字符串。</p></blockquote><hr><h3 id="声明多个返回值"><a href="#声明多个返回值" class="headerlink" title="声明多个返回值"></a>声明多个返回值</h3><blockquote><p>要声明函数的多个返回值，需将返回值类型放在函数声明的第二组圆括号中（在函数参数的圆括号之后），用逗号分隔。（当只有一个返回值时，返回值周围的圆括号是可选的，但如果有多个返回值，则必须使用圆括号。）</p><p>以后，当调用该函数时，你将需要考虑额外的返回值，通常通过将它们分配给额外的变量来实现。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026094530057.png" srcset="/img/loading.gif" alt="image-20201026094530057"></p><p>如果要使返回值的目的更清楚，你可以为每个返回值提供名称，类似于参数名称。命名返回值的主要用途是作为程序员阅读代码的文档。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026094633457.png" srcset="/img/loading.gif" alt="image-20201026094633457"></p></blockquote><hr><h3 id="函数形参接收实参的副本"><a href="#函数形参接收实参的副本" class="headerlink" title="函数形参接收实参的副本"></a>函数形参接收实参的副本</h3><p>这在大多数情况下是可以的。但是如果你想把一个变量的值传递给一个函数并让它以某种方式改变这个值，你就会遇到麻烦。函数只能更改形参中的该值的副本，而不能更改原始值。因此，在函数内部所做的任何更改在函数外部都将不可见！</p><ul><li>Go是一种“值传递”语言；函数形参从函数调用中接收实参的副本。</li></ul></blockquote><hr><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote><p>你可以使用一个&amp;符号获取变量的地址，它是Go的“地址”运算符。例如，这段代码初始化一个变量，打印它的值，然后打印变量的地址……</p><div class="hljs"><pre><code class="hljs go">&gt;<span class="hljs-keyword">package</span> main&gt;<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>&gt;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> ina <span class="hljs-keyword">int</span>=<span class="hljs-number">1</span>fmt.Println(ina)fmt.Print(&amp;ina)&gt;&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026095222113.png" srcset="/img/loading.gif" alt="image-20201026095222113"></p></blockquote><hr><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><blockquote><p>指针的类型可以写为一个<em>符号，后面跟着指针指向的变量的类型。例如，指向一个int变量的指针的类型将被写为</em>int（你可以将其大声读作“指向int的指针”）。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"fmt"</span><span class="hljs-string">"reflect"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> ina <span class="hljs-keyword">int</span>=<span class="hljs-number">1</span>fmt.Print(reflect.TypeOf(&amp;ina))&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026095422209.png" srcset="/img/loading.gif" alt="image-20201026095422209"></p><hr><h3 id="获取或更改指针的值"><a href="#获取或更改指针的值" class="headerlink" title="获取或更改指针的值"></a>获取或更改指针的值</h3><p>可以通过在代码中的指针之前输入<em>运算符来获得指针引用的变量的值。例如，要获得myIntPointer处的值，可以输入</em>myIntPointer。（对于如何读出<em>没有官方的一致意见，但是我们喜欢把它读成“处的值”，所以</em>myIntPointer就是“myIntPointer处的值”。）</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026095534510.png" srcset="/img/loading.gif" alt="image-20201026095534510"></p><ul><li><p>*运算符还可用于更新指针处的值：</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026095617517.png" srcset="/img/loading.gif" alt="image-20201026095617517"></p></li></ul></blockquote><hr><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><blockquote><p>可以从函数返回指针，只需声明函数的返回类型是指针类型。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201026095706804.png" srcset="/img/loading.gif" alt="image-20201026095706804"></p><p>与其他语言不同，在Go中，返回一个指向函数局部变量的指针是可以的。即使该变量不在作用域内，只要你仍然拥有指针，Go将确保你仍然可以访问该值。</p><p>还可以将指针作为参数传递给函数。只需说明一个或多个参数的类型应该是指针。</p></blockquote><hr><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes/02为Pod创建一个简单的YAML</title>
    <link href="/2020/10/23/kubernetes/02%E4%B8%BAPod%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84YAML/"/>
    <url>/2020/10/23/kubernetes/02%E4%B8%BAPod%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84YAML/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h2 id="一个简单的yaml文件"><a href="#一个简单的yaml文件" class="headerlink" title="一个简单的yaml文件"></a>一个简单的yaml文件</h2><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubia-manual</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">containers:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">luksa/kubia</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubia</span>    <span class="hljs-attr">ports:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8081</span>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span></code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes/01安装</title>
    <link href="/2020/10/23/kubernetes/01%E5%AE%89%E8%A3%85/"/>
    <url>/2020/10/23/kubernetes/01%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lisp/stream</title>
    <link href="/2020/10/23/Lisp/stream/"/>
    <url>/2020/10/23/Lisp/stream/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>语法基础</title>
    <link href="/2020/10/22/Golang/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/10/22/Golang/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 26 2020 10:02:29 GMT+0800 (CST) --><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><h3 id="1-要调用函数，需要输入函数名（本例中为Println），以及一对圆括号。"><a href="#1-要调用函数，需要输入函数名（本例中为Println），以及一对圆括号。" class="headerlink" title="1.要调用函数，需要输入函数名（本例中为Println），以及一对圆括号。"></a>1.要调用函数，需要输入函数名（本例中为Println），以及一对圆括号。</h3><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023104932552.png" srcset="/img/loading.gif" alt="image-20201023104932552"></p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;fmt.Print(<span class="hljs-string">"Hello, go"</span>)&#125;</code></pre></div><ul><li>结果</li><li><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023110630493.png" srcset="/img/loading.gif" alt="image-20201023110630493"></li></ul><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023112255164.png" srcset="/img/loading.gif" alt="image-20201023112255164"></p><h3 id="2-使用其他包中的函数"><a href="#2-使用其他包中的函数" class="headerlink" title="2.使用其他包中的函数"></a>2.使用其他包中的函数</h3><ul><li><p>Print函数是fmt（format.）包中的。</p></li><li><p>使用前需要 import “fmt” 导入</p></li></ul><h3 id="函数返回值。"><a href="#函数返回值。" class="headerlink" title="函数返回值。"></a>函数返回值。</h3><ul><li>与其他语言不同的是go函数的返回值可以有多个。</li></ul><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"fmt"</span><span class="hljs-string">"math"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;floor := math.Floor(<span class="hljs-number">3.14</span>)fmt.Println(floor)fmt.Print(<span class="hljs-string">"Hello, go"</span>)&#125;</code></pre></div><ul><li><p>如果变量定义出来没有使用，在go中是会报错的</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023113913802.png" srcset="/img/loading.gif" alt="image-20201023113913802"></p></li><li><p>结果</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023114205328.png" srcset="/img/loading.gif" alt="image-20201023114205328"></p></li></ul><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><p>字符串是一系列字节，通常表示文本字符。你可以在代码中直接使用字符串字面量来定义字符串：双引号之间的文本，Go将把它们视为字符串。</p><p>在字符串中，换行符、制表符和其他难以包含在程序代码中的字符可以用转义序列来表示：反斜杠后跟表示另一个字符的字符。</p></blockquote><ul><li><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023114812262.png" srcset="/img/loading.gif" alt="image-20201023114812262"></li></ul><hr><h2 id="符文"><a href="#符文" class="headerlink" title="符文"></a>符文</h2><blockquote><p>字符串字面量由双引号（”）包围，但rune字面量由单引号（’）包围。Go程序几乎可以使用地球上任何语言的任何字符，因为Go使用Unicode标准来存储rune。rune被保存为数字代码，而不是字符本身，如果你把rune传递给fmt.Println，你会在输出中看到数字代码，而不是原始字符。与字符串字面量一样，转义序列也可以用在rune字面量中，用来表示程序代码中难以包含的字符：</p></blockquote><ul><li>对应其他的语言的字符</li></ul><hr><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><blockquote><p>布尔值只能是两个值中的一个：true或false。它们对于条件语句特别有用，条件语句只在条件为true或false时才会导致代码段运行。</p></blockquote><hr><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><blockquote><p>Go将整数和浮点数视为不同的类型，因此请记住，可以使用小数点来区分整数和浮点数。</p></blockquote><hr><h2 id="数学运算与比较"><a href="#数学运算与比较" class="headerlink" title="数学运算与比较"></a>数学运算与比较</h2><blockquote><p>Go的基本数学运算符的工作方式与大多数其他语言一样。符号+表示加法，–表示减法，*表示乘法，/表示除法。</p><p>可以使用&lt;和&gt;来比较两个值，看看其中一个值是否小于或大于另一个值。可以使用==（这是两个等号）来查看两个值是否相等，以及！=（这是一个感叹号和一个等号，读作“不等于”）来查看两个值是否不相等。&lt;=测试第二个值是否大于或等于第一个值，&gt;=测试第二个值是否小于或等于第一个值。比较结果是一个布尔值，要么是true，要么是false。</p></blockquote><hr><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><blockquote><p>可以通过将任何值传递给reflect包的TypeOf函数，来查看它们的类型。</p></blockquote><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"fmt"</span><span class="hljs-string">"reflect"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;fmt.Println(reflect.TypeOf(<span class="hljs-number">12</span>))fmt.Println(reflect.TypeOf(<span class="hljs-number">12.1</span>))fmt.Println(reflect.TypeOf(<span class="hljs-string">"adsfads"</span>))fmt.Println(reflect.TypeOf(<span class="hljs-string">'\n'</span>))fmt.Println(reflect.TypeOf(main))&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023123844658.png" srcset="/img/loading.gif" alt="image-20201023123844658"></p><hr><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><blockquote><p>在Go中，变量是包含值的一块存储。可以使用变量声明为变量命名。只需使用var关键字，后跟所需的名称以及变量将保存的值的类型。</p><p>一旦你声明了一个变量，就可以用=（这是一个单等号）为它分配该类型的任何值：</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> ina <span class="hljs-keyword">int</span>ina = <span class="hljs-number">1</span>fmt.Print(ina)&#125;</code></pre></div><p>可以在同一语句中为多个变量赋值。只需将多个变量名放在=的左侧，将相同数量的值放在右侧，并使用逗号分隔。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> ina,inb <span class="hljs-keyword">int</span>ina,inb= <span class="hljs-number">1</span>,<span class="hljs-number">2</span>fmt.Print(ina+inb)&#125;</code></pre></div><p>如果你事先知道变量的值是什么，你可以声明变量并在同一行赋值</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> ina,inb <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-comment">//int 可以省略</span>fmt.Print(ina+inb)&#125;</code></pre></div></blockquote><hr><h2 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h2><blockquote><p>如果你声明变量时就知道它的初始值是什么，那么更具有代表性的是使用短变量声明。你不必很明确地声明变量的类型并在之后使用=为其赋值，而是同时使用：=。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ina,inb := <span class="hljs-number">1</span>,<span class="hljs-number">2</span>fmt.Print(ina+inb)&#125;</code></pre></div></blockquote><hr><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><blockquote><p>Go有一套简单的规则，适用于变量、函数和类型的名称：·名称必须以字母开头，并且可以有任意数量的额外的字母和数字。</p><p>·如果变量、函数或类型的名称以大写字母开头，则认为它是导出的，可以从当前包之外的包访问它。（这就是为什么fmt.Println中的P是大写的：这样它就可以在main包或任何其他包中使用。）</p><p>如果变量/函数/类型的名称是以小写字母开头的，则认为该名称是未导出的，只能在当前包中使用。这些是该语言强制执行的唯一规则。</p><p>但是Go社区还遵循一些额外的约定：·如果一个名称由多个单词组成，那么第一个单词之后的每个单词都应该首字母大写，并且它们应该连接在一起，中间没有空格，比如topPrice、RetryConnection，等等。</p><p>（名称的第一个字母只有在你想从包中导出时才应大写。）这种样式通常称为驼峰大小写，因为大写字母看起来像驼峰。</p><p>·当名称的含义在上下文中很明显时，Go社区的惯例是缩写它：用i代替index，用max代替maximum，等等。（然而，在本书里我们认为，当你学习一门新语言时，没有什么是显而易见的，我们不会遵循那个惯例。）[插图]只有名称是以大写字母开头的变量、函数或类型才被认为是可导出的：可以从当前包之外的包访问。</p></blockquote><ul><li>与其他语言有很大区别。</li></ul><hr><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><blockquote><p>Go中的数学运算和比较运算要求包含的值具有相同的类型。如果不是的话，则在尝试运行代码时会报错。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023152418683.png" srcset="/img/loading.gif" alt="image-20201023152418683"></p><p>解决方法是使用转换，它允许你将值从一种类型转换为另一种类型。只需提供要将值转换成的类型，后面紧接着是在圆括号中的要转换的值。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023153054631.png" srcset="/img/loading.gif" alt="image-20201023153054631"></p><p>转换后查看类型</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023153435396.png" srcset="/img/loading.gif" alt="image-20201023153435396"></p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023153452394.png" srcset="/img/loading.gif" alt=""></p></blockquote><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>大多数Go程序都在源代码中包含了它们是做什么的描述，目的是让维护程序的人员能够理解。编译器会忽略这些注释。</p><p>最常见的注释形式是用两个斜杠（//）标记的。从斜杠到行尾的所有内容都被视为注释部分。一条//注释可以单独出现在一行中，也可以出现在一行代码之后。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023154140138.png" srcset="/img/loading.gif" alt="image-20201023154140138"></p><p>不太常用的注释形式是块注释，它跨越多行。块注释以/<em>开始，以</em>/结束，这些标记之间的所有内容（包括换行）都是注释部分。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023154238110.png" srcset="/img/loading.gif" alt="image-20201023154238110"></p></blockquote><hr><h2 id="从键盘输入"><a href="#从键盘输入" class="headerlink" title="从键盘输入"></a>从键盘输入</h2><blockquote><p>我们需要一种从程序的标准输入中读取（接收和存储）输入的方法，所有的键盘输入都使用标准输入。行reader：=bufio.NewReader（os.Stdin）将bufio.Reader保存在reader变量中，它可以帮我们做到这一点。</p><p>为了实际获得用户的输入，我们调用Reader的ReadString方法。ReadString方法需要一个带有rune（字符）的参数来标记输入的结束。我们想要读取用户输入的所有内容，直到他们按下<enter>，所以我们给ReadString一个换行符。</enter></p><div class="hljs"><pre><code class="hljs go">&gt;<span class="hljs-keyword">package</span> main&gt;<span class="hljs-keyword">import</span> (<span class="hljs-string">"bufio"</span><span class="hljs-string">"os"</span>&gt;)&gt;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;reader:= bufio.NewReader(os.Stdin)readString, err := reader.ReadString(<span class="hljs-string">'\n'</span>)<span class="hljs-built_in">println</span>(err)<span class="hljs-built_in">println</span>(readString)&gt;&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023155251673.png" srcset="/img/loading.gif" alt="image-20201023155251673"></p></blockquote><hr><h2 id="函数或方法的多个返回值"><a href="#函数或方法的多个返回值" class="headerlink" title="函数或方法的多个返回值"></a>函数或方法的多个返回值</h2><blockquote><p>在大多数编程语言中，函数和方法只能有一个返回值，但在Go中，它们可以返回任意数量的值。Go中多个返回值最常见的用法是返回一个额外的错误值，可以通过查询该错误值来确定函数或方法运行时是否发生了错误。</p><p>Go要求声明的每个变量都必须在程序的某个地方使用。如果我们添加了一个err变量，而不检查它，我们的代码将无法编译。未使用的变量通常表示一个bug，所以这是一个Go帮助你检测和修复bug的例子！</p></blockquote><h3 id="选项1：使用空白标识符忽略错误返回值"><a href="#选项1：使用空白标识符忽略错误返回值" class="headerlink" title="选项1：使用空白标识符忽略错误返回值"></a>选项1：使用空白标识符忽略错误返回值</h3><blockquote><p>当我们有一个值时，通常会把它分配给一个变量，但我们不打算使用这个值时，我们可以使用Go的空白标识符。为空白标识符分配一个值实际上会丢弃它（同时让其他读你代码的人知道你正在这么做）。要使用空白标识符，只需在赋值语句中输入一个下划线（_）字符，通常在这里输入的是变量名。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"bufio"</span><span class="hljs-string">"os"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;reader:= bufio.NewReader(os.Stdin)readString, _ := reader.ReadString(<span class="hljs-string">'\n'</span>)<span class="hljs-built_in">println</span>(readString)&#125;</code></pre></div></blockquote><hr><h2 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h2><blockquote><p>条件语句：只有在满足某个条件时，才导致代码块（一个或多个由花括号{}包围的语句）被执行的语句。计算表达式，如果结果为true，则执行条件块体中的代码。如果为false，则跳过条件块。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023155916052.png" srcset="/img/loading.gif" alt="image-20201023155916052"></p><p>当你仅在条件为假时才需要执行代码时，可以使用！布尔求反运算符，它允许你获取一个真值并使其为假，或者获取一个假值并使其为真。</p><p>如果只希望在两个条件都为真时运行一些代码，可以使用&amp;&amp;（“与”）运算符。如果你想让它在两个条件之一为真时运行，你可以使用||（“或”）运算符。</p></blockquote><hr><h2 id="有条件地记录致命错误"><a href="#有条件地记录致命错误" class="headerlink" title="有条件地记录致命错误"></a>有条件地记录致命错误</h2><blockquote><p>我们知道，如果err变量中的值为nil，则表示从键盘读取成功。现在我们了解了if语句，让我们尝试更新代码以记录错误，并仅在err不为nil时退出。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"bufio"</span><span class="hljs-string">"log"</span><span class="hljs-string">"os"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;reader:= bufio.NewReader(os.Stdin)readString, err := reader.ReadString(<span class="hljs-string">'\n'</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;<span class="hljs-built_in">println</span>(err)<span class="hljs-built_in">println</span>(readString)&#125;</code></pre></div></blockquote><hr><h2 id="err-与-error"><a href="#err-与-error" class="headerlink" title="err 与 error"></a>err 与 error</h2><blockquote><p>命名一个error变量是一个坏主意，因为它会遮盖一个名为error的类型的名称。</p><p>声明变量时，应确保它与任何现有的函数、包、类型或其他变量的名称不同。如果在封闭范围内存在同名的东西（稍后我们将讨论作用域），则你的变量将对它进行遮盖，也就是说，优先于它。而这往往是一件坏事。</p></blockquote><hr><h2 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h2><blockquote><p>条件语句还允许我们评估输入的分数。让我们添加一个if/else语句来确定分数是及格还是不及格。如果输入的百分比分数为60或更高，我们会将状态设置为“及格”。否则，我们将设置为“不及格”。</p><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"bufio"</span><span class="hljs-string">"log"</span><span class="hljs-string">"os"</span><span class="hljs-string">"strconv"</span><span class="hljs-string">"strings"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;reader := bufio.NewReader(os.Stdin)readString, err := reader.ReadString(<span class="hljs-string">'\n'</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;float, err := strconv.ParseFloat(strings.TrimSpace(readString),<span class="hljs-number">64</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;<span class="hljs-keyword">if</span>  float &gt; <span class="hljs-number">60</span> &#123;<span class="hljs-built_in">print</span>(<span class="hljs-string">"及格"</span>)&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">print</span>(<span class="hljs-string">"不及格"</span>)&#125;&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023161920636.png" srcset="/img/loading.gif" alt="image-20201023161920636"></p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023161954134.png" srcset="/img/loading.gif" alt="image-20201023161954134"></p><ul><li>strings包有一个TrimSpace函数，它将删除字符串开头和结尾的所有空白字符（换行符、制表符和常规空格）。</li><li>现在input字符串中应该保留的是用户输入的数字。我们可以使用strconv包的ParseFloat函数将其转换为float64值。</li></ul></blockquote><hr><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><blockquote><p>Go代码可以分为块，即代码段。块通常由大括号（{}）包围，尽管在源代码文件和包级别也有块。块可以彼此嵌套。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023162804007.png" srcset="/img/loading.gif" alt="image-20201023162804007"></p><ul><li><p>·packageVar的作用域是整个main包。你可以在包中定义的任何函数内的任何位置访问packageVar。</p></li><li><p>·functionVar的作用域是它声明所在的整个函数，包括嵌套在该函数中的if块。</p></li><li><p>·conditionalVar的作用域仅限于if块。当我们试图在if块的右大括号之后访问conditionalVar时，我们将收到一个错误，说conditionalVar未定义！</p></li></ul></blockquote><hr><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><blockquote><p>循环总是以for关键字开头。在一种常见的循环中，for后面跟着三段控制循环的代码：</p><ul><li><p>·一个初始化（或init）语句，通常用于初始化一个变量·</p></li><li><p>一个条件表达式，用于决定何时中断循环·</p></li><li><p>一个标志（post）语句，在循环的每次迭代之后运行</p><p>通常，初始化语句用于初始化一个变量，条件表达式保持循环运行，直到该变量达到某个值，标志（post）语句用于更改该变量的值。</p></li></ul></blockquote><ul><li><p>例如，在这个代码段中，t变量初始化为3，条件保持循环在t&gt;0时继续运行，并且每次循环运行时标志（post）语句都会从t中减去1。最终，t达到0时，循环终止。</p><blockquote><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023163548755.png" srcset="/img/loading.gif" alt="image-20201023163548755"></p></blockquote></li></ul><hr><h2 id="初始化和标志（post）语句是可选的"><a href="#初始化和标志（post）语句是可选的" class="headerlink" title="初始化和标志（post）语句是可选的"></a>初始化和标志（post）语句是可选的</h2><blockquote><p>如果你愿意，可以从for循环中省略初始化和标志（post）语句，只留下条件表达式（尽管你仍然需要确保条件的最终计算结果为false，或者你的手上可能有一个无限循环）。</p><p>与条件语句一样，循环块中声明的任何变量的作用域都仅限于该块（虽然初始化语句、条件表达式和标志（post）语句也可以被认为是该作用域的一部分）。</p><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023163833248.png" srcset="/img/loading.gif" alt="image-20201023163833248"></p><ul><li>所以go语言中没有while。</li></ul></blockquote><hr><h2 id="9-9乘法表"><a href="#9-9乘法表" class="headerlink" title="9*9乘法表"></a>9*9乘法表</h2><div class="hljs"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> a:=<span class="hljs-number">1</span>;a&lt;<span class="hljs-number">10</span>;a++ &#123;<span class="hljs-keyword">for</span> b:=<span class="hljs-number">1</span>;b&lt;=a;b++ &#123;<span class="hljs-built_in">print</span>(a,<span class="hljs-string">"*"</span>,b,<span class="hljs-string">"="</span>, a*b,<span class="hljs-string">"\t"</span>)&#125;<span class="hljs-built_in">println</span>()&#125;&#125;</code></pre></div><p><img src="https://gitee.com/htxdlm/md-images/raw/master/image-20201023164429128.png" srcset="/img/loading.gif" alt="image-20201023164429128"></p><hr><h2 id="使用“continue”和“break”跳过部分循环"><a href="#使用“continue”和“break”跳过部分循环" class="headerlink" title="使用“continue”和“break”跳过部分循环"></a>使用“continue”和“break”跳过部分循环</h2><blockquote><ul><li><p>Go提供了控制循环流的两个关键字。第一个continue，立即跳转到循环的下一个迭代，而不需要在循环块中运行任何其他代码。</p></li><li><p>第二个关键字break立即跳出循环。不再执行循环块中的代码，也不再运行进一步的迭代。执行移动到循环之后的第一个语句。</p></li></ul></blockquote><hr><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/SpringBoot整合</title>
    <link href="/2020/07/30/Rabbitmq/SpringBoot%E6%95%B4%E5%90%88/"/>
    <url>/2020/07/30/Rabbitmq/SpringBoot%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><h2 id="pom依赖配置"><a href="#pom依赖配置" class="headerlink" title="pom依赖配置"></a>pom依赖配置</h2><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h2 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h2><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">rabbitmq:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.171</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/text01</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">30672</span>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span> <span class="hljs-comment">#必须配置这个才会确认回调 confirm</span>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#return回调 </span>    <span class="hljs-attr">listener:</span>      <span class="hljs-attr">type:</span> <span class="hljs-string">simple</span>      <span class="hljs-attr">simple:</span>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#手动确认ack</span>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#限制每次发送一条数据。</span>        <span class="hljs-attr">concurrency:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#同一个队列启动几个消费者</span>        <span class="hljs-attr">max-concurrency:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#启动消费者最大数量</span>        <span class="hljs-attr">default-requeue-rejected:</span> <span class="hljs-literal">true</span></code></pre></div><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> org.springframework.amqp.core.AmqpTemplate;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> org.springframework.transaction.TransactionManager;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;    <span class="hljs-keyword">final</span>    RabbitTemplate rabbitTemplate;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Producer</span><span class="hljs-params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;        <span class="hljs-keyword">this</span>.rabbitTemplate = rabbitTemplate;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(String exchange,String key,String meg)</span></span>&#123;                <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(exchange,key,meg,<span class="hljs-keyword">new</span> CorrelationData(UUID.randomUUID().toString()));    &#125;&#125;</code></pre></div><h2 id="DirectConsumer"><a href="#DirectConsumer" class="headerlink" title="DirectConsumer"></a>DirectConsumer</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> org.springframework.amqp.core.ExchangeTypes;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.*;<span class="hljs-keyword">import</span> org.springframework.amqp.support.AmqpHeaders;<span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Headers;<span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Payload;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DirectConsumer</span> </span>&#123;    <span class="hljs-meta">@RabbitListener</span>(containerFactory = <span class="hljs-string">"rabbitListenerContainerFactory"</span>,bindings=<span class="hljs-meta">@QueueBinding</span>(            value=<span class="hljs-meta">@Queue</span>(value=<span class="hljs-string">"directQueue"</span>,autoDelete=<span class="hljs-string">"false"</span>),            exchange=<span class="hljs-meta">@Exchange</span>(value=<span class="hljs-string">"directEx"</span>,type= ExchangeTypes.DIRECT),            key = &#123;<span class="hljs-string">"1.2"</span>,<span class="hljs-string">"1.3"</span>&#125;    ),ackMode = <span class="hljs-string">"MANUAL"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handler</span><span class="hljs-params">(@Payload String body, @Headers Map&lt;String,Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        System.out.println(<span class="hljs-string">"handler:   "</span>+body);        <span class="hljs-comment">//channel.basicNack((Long)headers.get(AmqpHeaders.DELIVERY_TAG),false,false);</span>        channel.basicAck((Long)headers.get(AmqpHeaders.DELIVERY_TAG),<span class="hljs-keyword">false</span>);        <span class="hljs-comment">//headers.forEach((k,v)-&gt;&#123;System.out.println("key:"+k+"    value:"+v);&#125;);</span>    &#125;    <span class="hljs-meta">@RabbitListener</span>(containerFactory = <span class="hljs-string">"rabbitListenerContainerFactory"</span>,bindings=<span class="hljs-meta">@QueueBinding</span>(            value=<span class="hljs-meta">@Queue</span>(value=<span class="hljs-string">"directQueue"</span>,autoDelete=<span class="hljs-string">"false"</span>),            exchange=<span class="hljs-meta">@Exchange</span>(value=<span class="hljs-string">"directEx"</span>,type= ExchangeTypes.DIRECT),            key = &#123;<span class="hljs-string">"1.2"</span>,<span class="hljs-string">"1.3"</span>&#125;    ),ackMode = <span class="hljs-string">"MANUAL"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handler1</span><span class="hljs-params">(@Payload String body, @Headers Map&lt;String,Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;        System.out.println(<span class="hljs-string">"handler1:   "</span>+body);        <span class="hljs-comment">//channel.basicNack((Long)headers.get(AmqpHeaders.DELIVERY_TAG),false,false);</span>        Thread.sleep(<span class="hljs-number">1000</span>);        channel.basicAck((Long)headers.get(AmqpHeaders.DELIVERY_TAG),<span class="hljs-keyword">false</span>);        <span class="hljs-comment">//headers.forEach((k,v)-&gt;&#123;System.out.println("key:"+k+"    value:"+v);&#125;);</span>    &#125;&#125;</code></pre></div><h2 id="FanoutConsumer"><a href="#FanoutConsumer" class="headerlink" title="FanoutConsumer"></a>FanoutConsumer</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> org.springframework.amqp.core.ExchangeTypes;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.*;<span class="hljs-keyword">import</span> org.springframework.amqp.support.AmqpHeaders;<span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Headers;<span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Payload;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutConsumer</span> </span>&#123;    <span class="hljs-meta">@RabbitListener</span>(bindings = <span class="hljs-meta">@QueueBinding</span>(            value = <span class="hljs-meta">@Queue</span>(value = <span class="hljs-string">"fanoutQueue01"</span>,autoDelete = <span class="hljs-string">"true"</span>),            exchange = <span class="hljs-meta">@Exchange</span>(value = <span class="hljs-string">"fanout"</span>,type = ExchangeTypes.FANOUT)    ),ackMode = <span class="hljs-string">"MANUAL"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handler1</span><span class="hljs-params">(@Payload String body, @Headers Map&lt;String,Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;        System.out.println(<span class="hljs-string">"handler1:   "</span>+body);        <span class="hljs-comment">//channel.basicNack((Long)headers.get(AmqpHeaders.DELIVERY_TAG),false,false);</span>        Thread.sleep(<span class="hljs-number">1000</span>);        channel.basicAck((Long)headers.get(AmqpHeaders.DELIVERY_TAG),<span class="hljs-keyword">false</span>);        <span class="hljs-comment">//headers.forEach((k,v)-&gt;&#123;System.out.println("key:"+k+"    value:"+v);&#125;);</span>    &#125;    <span class="hljs-meta">@RabbitListener</span>(bindings = <span class="hljs-meta">@QueueBinding</span>(            value = <span class="hljs-meta">@Queue</span>(value = <span class="hljs-string">"fanoutQueue02"</span>,autoDelete = <span class="hljs-string">"true"</span>),            exchange = <span class="hljs-meta">@Exchange</span>(value = <span class="hljs-string">"fanout"</span>,type = ExchangeTypes.FANOUT)    ),ackMode = <span class="hljs-string">"MANUAL"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handler</span><span class="hljs-params">(@Payload String body, @Headers Map&lt;String,Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;        System.out.println(<span class="hljs-string">"handler:   "</span>+body);        <span class="hljs-comment">//channel.basicNack((Long)headers.get(AmqpHeaders.DELIVERY_TAG),false,false);</span>        channel.basicAck((Long)headers.get(AmqpHeaders.DELIVERY_TAG),<span class="hljs-keyword">false</span>);        <span class="hljs-comment">//headers.forEach((k,v)-&gt;&#123;System.out.println("key:"+k+"    value:"+v);&#125;);</span>    &#125;&#125;</code></pre></div><h2 id="TopicConsumer"><a href="#TopicConsumer" class="headerlink" title="TopicConsumer"></a>TopicConsumer</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> org.springframework.amqp.core.ExchangeTypes;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<span class="hljs-keyword">import</span> org.springframework.amqp.support.AmqpHeaders;<span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Headers;<span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Payload;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicConsumer</span> </span>&#123;    <span class="hljs-meta">@RabbitListener</span>(bindings = <span class="hljs-meta">@QueueBinding</span>(            value = <span class="hljs-meta">@Queue</span>(value = <span class="hljs-string">"topicQueue01"</span>,autoDelete = <span class="hljs-string">"true"</span>),            exchange = <span class="hljs-meta">@Exchange</span>(value = <span class="hljs-string">"topic"</span>,type = ExchangeTypes.TOPIC),            key = &#123;<span class="hljs-string">"#.1"</span>,<span class="hljs-string">"1.#"</span>&#125;    ),ackMode = <span class="hljs-string">"MANUAL"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handler1</span><span class="hljs-params">(@Payload String body, @Headers Map&lt;String,Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;        System.out.println(headers.get(AmqpHeaders.RECEIVED_ROUTING_KEY)+<span class="hljs-string">"topicQueue01:   "</span>+body);        <span class="hljs-comment">//channel.basicNack((Long)headers.get(AmqpHeaders.DELIVERY_TAG),false,false);</span>        channel.basicAck((Long)headers.get(AmqpHeaders.DELIVERY_TAG),<span class="hljs-keyword">false</span>);        <span class="hljs-comment">//headers.forEach((k,v)-&gt;&#123;System.out.println("key:"+k+"    value:"+v);&#125;);</span>    &#125;    <span class="hljs-meta">@RabbitListener</span>(bindings = <span class="hljs-meta">@QueueBinding</span>(            value = <span class="hljs-meta">@Queue</span>(value = <span class="hljs-string">"topicQueue02"</span>,autoDelete = <span class="hljs-string">"true"</span>),            exchange = <span class="hljs-meta">@Exchange</span>(value = <span class="hljs-string">"topic"</span>,type = ExchangeTypes.TOPIC),            key = &#123;<span class="hljs-string">"#.2"</span>,<span class="hljs-string">"2.#"</span>,<span class="hljs-string">"3.*"</span>&#125;    ),ackMode = <span class="hljs-string">"MANUAL"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handler</span><span class="hljs-params">(@Payload String body, @Headers Map&lt;String,Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;        System.out.println(headers.get(AmqpHeaders.RECEIVED_ROUTING_KEY)+<span class="hljs-string">"topicQueue02:                          "</span>+body);        <span class="hljs-comment">//channel.basicNack((Long)headers.get(AmqpHeaders.DELIVERY_TAG),false,false);</span>        channel.basicAck((Long)headers.get(AmqpHeaders.DELIVERY_TAG),<span class="hljs-keyword">false</span>);        <span class="hljs-comment">//headers.forEach((k,v)-&gt;&#123;System.out.println("key:"+k+"    value:"+v);&#125;);</span>    &#125;&#125;</code></pre></div><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-meta">@SpringBootTest</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplicationTests</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    Producer producer;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Text</span><span class="hljs-params">()</span> </span>&#123;        producer.rabbitTemplate.setReturnCallback((message,replyCode,replyText,exchange,routingKey) -&gt;&#123;                System.out.println(<span class="hljs-string">"Return"</span>);            &#125;        );        producer.rabbitTemplate.setConfirmCallback(<span class="hljs-keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-keyword">boolean</span> ack, String cause)</span> </span>&#123;                System.out.println(<span class="hljs-string">"Ack:"</span>+ack);            &#125;        &#125;);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;            producer.send(<span class="hljs-string">"topic"</span>,i+<span class="hljs-string">".1"</span>,<span class="hljs-string">"Hello world:"</span>+i);        &#125;    &#125;&#125;</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/发送者与交换机</title>
    <link href="/2020/07/29/Rabbitmq/%E5%8F%91%E9%80%81%E8%80%85%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <url>/2020/07/29/Rabbitmq/%E5%8F%91%E9%80%81%E8%80%85%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="发送者与交换机"><a href="#发送者与交换机" class="headerlink" title="发送者与交换机"></a>发送者与交换机</h1><ul><li>发送者与交换机的确认机制confirm与Return</li></ul><h2 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h2><ul><li><p>Ack</p><ul><li>消息被broker接受</li></ul></li><li><p>Nack</p><ul><li>消息没有被broker接受</li></ul></li></ul><h2 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h2><ul><li>消息被broker接受，可以没有对应的queue，所有返回给生产者</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="hljs"><pre><code class="hljs java">channel.addConfirmListener(<span class="hljs-keyword">new</span> ConfirmListener() &#123;           <span class="hljs-meta">@Override</span>           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleAck</span><span class="hljs-params">(<span class="hljs-keyword">long</span> l, <span class="hljs-keyword">boolean</span> b)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;               System.out.println(<span class="hljs-string">"消息被broker接受"</span>+l);           &#125;           <span class="hljs-meta">@Override</span>               <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleNack</span><span class="hljs-params">(<span class="hljs-keyword">long</span> l, <span class="hljs-keyword">boolean</span> b)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;               System.out.println(<span class="hljs-string">"消息没有被broker接受"</span>+l);           &#125;       &#125;);       channel.addReturnListener((i)-&gt;&#123;           System.out.println(<span class="hljs-string">"+++++++++"</span>+<span class="hljs-keyword">new</span> String(i.getBody())+<span class="hljs-string">"  code:"</span>+i.getReplyCode()+<span class="hljs-string">"  mianshi:"</span>+i.getReplyText()+<span class="hljs-string">"   jiaohuangji:"</span>+i.getExchange()+<span class="hljs-string">"   luyoukey:"</span>+i.getRoutingKey());       &#125;);</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/hello-world</title>
    <link href="/2020/07/29/Rabbitmq/hello-world/"/>
    <url>/2020/07/29/Rabbitmq/hello-world/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h1><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><h4 id="MyConsumers-java"><a href="#MyConsumers-java" class="headerlink" title="MyConsumers.java"></a>MyConsumers.java</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo12;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumers</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        ConnectionFactory factory=<span class="hljs-keyword">new</span> ConnectionFactory();        factory.setPort(<span class="hljs-number">30672</span>);<span class="hljs-comment">//k8s映射出的端口对应 5672端口</span>        factory.setHost(<span class="hljs-string">"192.168.1.171"</span>);         factory.setUsername(<span class="hljs-string">"admin"</span>);        factory.setPassword(<span class="hljs-string">"admin"</span>);        factory.setVirtualHost(<span class="hljs-string">"/text01"</span>);        Connection connection = factory.newConnection();        Channel channel = connection.createChannel();         <span class="hljs-comment">/**</span><span class="hljs-comment">     * Declare a queue</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Queue.Declare</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Queue.DeclareOk</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queue the name of the queue</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> durable true if we are declaring a durable queue (the queue will survive a server restart)</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exclusive true if we are declaring an exclusive queue (restricted to this connection)</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> autoDelete true if we are declaring an autodelete queue (server will delete it when no longer in use)</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arguments other properties (construction arguments) for the queue</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a declaration-confirm method to indicate the queue was successfully declared</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> java.io.IOException if an error is encountered</span><span class="hljs-comment">     */</span>        channel.queueDeclare(<span class="hljs-string">"helloWorld"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);                channel.basicConsume(<span class="hljs-string">"helloWorld"</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">new</span> Reciver(channel));    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reciver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultConsumer</span></span>&#123;        Channel channel;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Reciver</span><span class="hljs-params">(Channel channel)</span> </span>&#123;            <span class="hljs-keyword">super</span>(channel);            <span class="hljs-keyword">this</span>.channel=channel;        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;            <span class="hljs-comment">//super.handleDelivery(consumerTag, envelope, properties, body);</span>            System.out.println(<span class="hljs-keyword">new</span> String(body));            channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);        &#125;    &#125;&#125;</code></pre></div><h4 id="MyProducer-java"><a href="#MyProducer-java" class="headerlink" title="MyProducer.java"></a>MyProducer.java</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo12;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;        ConnectionFactory factory=<span class="hljs-keyword">new</span> ConnectionFactory();        factory.setPort(<span class="hljs-number">30672</span>);        factory.setHost(<span class="hljs-string">"192.168.1.171"</span>);        factory.setUsername(<span class="hljs-string">"admin"</span>);        factory.setPassword(<span class="hljs-string">"admin"</span>);        factory.setVirtualHost(<span class="hljs-string">"/text01"</span>);        Connection connection = factory.newConnection();        Channel channel = connection.createChannel();        channel.queueDeclare(<span class="hljs-string">"helloWorld"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);        String meg=<span class="hljs-string">"Hello World"</span>;        Thread.sleep(<span class="hljs-number">3000</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000</span>;i++)&#123;            channel.basicPublish(<span class="hljs-string">""</span>,<span class="hljs-string">"helloWorld"</span>,<span class="hljs-keyword">null</span>,(meg+i).getBytes());        &#125;        channel.close();;        connection.close();    &#125;&#125;</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/topic模式</title>
    <link href="/2020/07/29/Rabbitmq/topic%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/07/29/Rabbitmq/topic%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="topic模式"><a href="#topic模式" class="headerlink" title="topic模式"></a>topic模式</h1><ul><li>与direct模式差不多，都要通过routingKey发送给对应的queue</li><li>区别就是topic是模糊匹配routingKey</li></ul><h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><ul><li>在对应的Virtual Hosts中创建Exchange</li><li>Exchange的模式改为topic模式</li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> topic;<span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> java.util.LinkedHashMap;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception, TimeoutException </span>&#123;        LinkedHashMap&lt;String, String&gt; strMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;            channel.basicPublish(<span class="hljs-string">"topic01"</span>,<span class="hljs-string">"1."</span>+String.valueOf(i),<span class="hljs-keyword">null</span>,(<span class="hljs-string">"Hello Fan Out"</span>+i).getBytes());        &#125;        channel.close();        connection.close();    &#125;&#125;</code></pre></div><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> topic;<span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        channel.queueDeclare(<span class="hljs-string">"baidu"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);        channel.basicQos(<span class="hljs-number">1</span>);<span class="hljs-comment">//每次只会取一条数据处理</span>        channel.queueBind(<span class="hljs-string">"baidu"</span>,<span class="hljs-string">"topic01"</span>,<span class="hljs-string">"1.#"</span>);        channel.basicConsume(<span class="hljs-string">"baidu"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">//super.handleDelivery(consumerTag, envelope, properties, body);</span>                String jsonMeg = <span class="hljs-keyword">new</span> String(body);                System.out.println(<span class="hljs-string">"  百度：                           "</span>+jsonMeg);                channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);            &#125;        &#125;);    &#125;&#125;</code></pre></div><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><ul><li>要点：channel.queueBind()</li><li>在绑定的时候使用 # * 进行模糊处理</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/queue与消费者</title>
    <link href="/2020/07/29/Rabbitmq/queue%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <url>/2020/07/29/Rabbitmq/queue%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="queue与消费者"><a href="#queue与消费者" class="headerlink" title="queue与消费者"></a>queue与消费者</h1><ul><li>是否自动ack</li><li>手动ack时，是否确认所有消息</li></ul><h2 id="自动ack"><a href="#自动ack" class="headerlink" title="自动ack"></a>自动ack</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * Start a non-nolocal, non-exclusive consumer, with</span><span class="hljs-comment">   * a server-generated consumerTag.</span><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> queue the name of the queue</span><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> autoAck true if the server should consider messages</span><span class="hljs-comment">   * acknowledged once delivered; false if the server should expect</span><span class="hljs-comment">   * explicit acknowledgements</span><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> callback an interface to the consumer object</span><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> the consumerTag generated by the server</span><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> java.io.IOException if an error is encountered</span><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Basic.Consume</span><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Basic.ConsumeOk</span><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> #basicConsume(String, boolean, String, boolean, boolean, Map, Consumer)</span><span class="hljs-comment">   */</span>     channel.basicConsume(<span class="hljs-string">"helloWorld"</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> Reciver(channel));</code></pre></div><h2 id="手动ack"><a href="#手动ack" class="headerlink" title="手动ack"></a>手动ack</h2><div class="hljs"><pre><code class="hljs java">channel.basicConsume(<span class="hljs-string">"helloWorld"</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">new</span> Reciver(channel)); <span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;            <span class="hljs-comment">//super.handleDelivery(consumerTag, envelope, properties, body);</span>            System.out.println(<span class="hljs-keyword">new</span> String(body));       <span class="hljs-comment">/**</span><span class="hljs-comment">     * Acknowledge one or several received</span><span class="hljs-comment">     * messages. Supply the deliveryTag from the &#123;<span class="hljs-doctag">@link</span> com.rabbitmq.client.AMQP.Basic.GetOk&#125;</span><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@link</span> com.rabbitmq.client.AMQP.Basic.Deliver&#125; method</span><span class="hljs-comment">     * containing the received message being acknowledged.</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Basic.Ack</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> deliveryTag the tag from the received &#123;<span class="hljs-doctag">@link</span> com.rabbitmq.client.AMQP.Basic.GetOk&#125; or &#123;<span class="hljs-doctag">@link</span> com.rabbitmq.client.AMQP.Basic.Deliver&#125;</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> multiple true to acknowledge all messages up to and</span><span class="hljs-comment">     * including the supplied delivery tag; false to acknowledge just</span><span class="hljs-comment">     * the supplied delivery tag.</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> java.io.IOException if an error is encountered</span><span class="hljs-comment">     */</span>            channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);&#125;</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/提取工具类</title>
    <link href="/2020/07/29/Rabbitmq/%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2020/07/29/Rabbitmq/%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="提取工具类"><a href="#提取工具类" class="headerlink" title="提取工具类"></a>提取工具类</h1><ul><li>在消费者与生产者中代码前期的ConnectionFactory代码设置操作可以进行代码提取封装工具类</li></ul><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitUtils</span> </span>&#123;    <span class="hljs-keyword">static</span> ConnectionFactory factory=<span class="hljs-keyword">new</span> ConnectionFactory();    <span class="hljs-keyword">static</span> &#123;        factory.setPort(<span class="hljs-number">30672</span>);        factory.setHost(<span class="hljs-string">"192.168.1.171"</span>);        factory.setUsername(<span class="hljs-string">"admin"</span>);        factory.setPassword(<span class="hljs-string">"admin"</span>);        factory.setVirtualHost(<span class="hljs-string">"/text01"</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-keyword">return</span> factory.newConnection();    &#125;&#125;</code></pre></div><ul><li><p>以后获取Connection可以直接</p><div class="hljs"><pre><code class="hljs java">Connection connection = RabbitUtils.getConnection();</code></pre></div></li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/fanout模式</title>
    <link href="/2020/07/29/Rabbitmq/fanout%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/07/29/Rabbitmq/fanout%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="fanout模式"><a href="#fanout模式" class="headerlink" title="fanout模式"></a>fanout模式</h1><ul><li>广播模式</li><li>Exchange会把消息发送给所有绑定在当前交换机上的队列</li></ul><h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><ul><li>在对应的Virtual Hosts中创建Exchange</li><li>Exchange的模式改为fanout模式</li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fanout;<span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception, TimeoutException </span>&#123;        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;            channel.basicPublish(<span class="hljs-string">"exchange01"</span>,<span class="hljs-string">""</span>,<span class="hljs-keyword">null</span>,(<span class="hljs-string">"Hello Fan Out"</span>+i).getBytes());        &#125;        channel.close();        connection.close();    &#125;&#125;</code></pre></div><h2 id="消费者1号"><a href="#消费者1号" class="headerlink" title="消费者1号"></a>消费者1号</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fanout;<span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.google.gson.Gson;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> work.queue.Meg;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        channel.queueDeclare(<span class="hljs-string">"baidu"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);        channel.basicQos(<span class="hljs-number">1</span>);<span class="hljs-comment">//每次只会取一条数据处理</span>        channel.queueBind(<span class="hljs-string">"baidu"</span>,<span class="hljs-string">"exchange01"</span>,<span class="hljs-string">""</span>);        channel.basicConsume(<span class="hljs-string">"baidu"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">//super.handleDelivery(consumerTag, envelope, properties, body);</span>                String jsonMeg = <span class="hljs-keyword">new</span> String(body);                System.out.println(<span class="hljs-string">"  百度：                           "</span>+jsonMeg);                channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);            &#125;        &#125;);    &#125;&#125;</code></pre></div><h2 id="消费者2号"><a href="#消费者2号" class="headerlink" title="消费者2号"></a>消费者2号</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fanout;<span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.google.gson.Gson;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> work.queue.Meg;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        channel.queueDeclare(<span class="hljs-string">"google"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);        channel.basicQos(<span class="hljs-number">1</span>);<span class="hljs-comment">//每次只会取一条数据处理</span>        channel.queueBind(<span class="hljs-string">"google"</span>,<span class="hljs-string">"exchange01"</span>,<span class="hljs-string">""</span>);<span class="hljs-comment">//绑定交换机</span>        channel.basicConsume(<span class="hljs-string">"google"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">//super.handleDelivery(consumerTag, envelope, properties, body);</span>                String jsonMeg = <span class="hljs-keyword">new</span> String(body);                System.out.println(<span class="hljs-string">"MyConsumer01  :  "</span>+jsonMeg);                channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);            &#125;        &#125;);    &#125;&#125;</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/direct模式</title>
    <link href="/2020/07/29/Rabbitmq/direct%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/07/29/Rabbitmq/direct%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h1><ul><li>默认模式</li><li>通过routingKey发送给对应的queue</li></ul><h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><ul><li>在对应的Virtual Hosts中创建Exchange</li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> java.util.LinkedHashMap;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception, TimeoutException </span>&#123;        LinkedHashMap&lt;String, String&gt; strMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;               <span class="hljs-comment">/**</span><span class="hljs-comment">     * Publish a message.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * Publishing to a non-existent exchange will result in a channel-level</span><span class="hljs-comment">     * protocol exception, which closes the channel.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the exchange to publish the message to</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> routingKey the routing key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> props other properties for the message - routing headers etc</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> body the message body</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> java.io.IOException if an error is encountered</span><span class="hljs-comment">     */</span>            channel.basicPublish(<span class="hljs-string">"routing01"</span>,String.valueOf(i),<span class="hljs-keyword">null</span>,(<span class="hljs-string">"Hello Fan Out"</span>+i).getBytes());        &#125;        channel.close();        connection.close();    &#125;&#125;</code></pre></div><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Routing;<span class="hljs-keyword">import</span> RabbitUtils.RabbitUtils;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;        Connection connection = RabbitUtils.getConnection();        Channel channel = connection.createChannel();        channel.queueDeclare(<span class="hljs-string">"baidu"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);        channel.basicQos(<span class="hljs-number">1</span>);<span class="hljs-comment">//每次只会取一条数据处理</span>         <span class="hljs-comment">/**</span><span class="hljs-comment">     * Bind a queue to an exchange, with no extra arguments.</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Queue.Bind</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> com.rabbitmq.client.AMQP.Queue.BindOk</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queue the name of the queue</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the name of the exchange</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> routingKey the routing key to use for the binding</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a binding-confirm method if the binding was successfully created</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> java.io.IOException if an error is encountered</span><span class="hljs-comment">     */</span>        channel.queueBind(<span class="hljs-string">"baidu"</span>,<span class="hljs-string">"routing01"</span>,String.valueOf(<span class="hljs-number">1</span>));        channel.basicConsume(<span class="hljs-string">"baidu"</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">//super.handleDelivery(consumerTag, envelope, properties, body);</span>                String jsonMeg = <span class="hljs-keyword">new</span> String(body);                System.out.println(<span class="hljs-string">"  百度：                           "</span>+jsonMeg);                channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);            &#125;        &#125;);    &#125;&#125;</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq/安装RabbitMq</title>
    <link href="/2020/07/29/Rabbitmq/%E5%AE%89%E8%A3%85RabbitMq/"/>
    <url>/2020/07/29/Rabbitmq/%E5%AE%89%E8%A3%85RabbitMq/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="安装RabbitMq"><a href="#安装RabbitMq" class="headerlink" title="安装RabbitMq"></a>安装RabbitMq</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>k8s</li><li>Rancher</li><li>可以正常下载镜像</li></ul><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ul><li>macintoshplus/rabbitmq-management</li><li>自带ui管理的版本</li></ul><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><ul><li><p>5672 （服务端口）</p></li><li><p>15672 （ui管理端口）</p></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul><li>RABBITMQ_DEFAULT_PASS = admin</li><li>RABBITMQ_DEFAULT_USER = admin</li></ul><h3 id="成功搭建开发环境"><a href="#成功搭建开发环境" class="headerlink" title="成功搭建开发环境"></a>成功搭建开发环境</h3><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Rabbitmq</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis/9类型处理器</title>
    <link href="/2020/07/20/mybatis/9%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/2020/07/20/mybatis/9%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>mybatis的类型处理器就是java类型与数据库类型互相映射</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>作用域</title>
    <link href="/2020/07/19/Java/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2020/07/19/Java/%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><blockquote><p>用来确定变量名的可见性和他们的生命周期<br>就是一对大括号{}大括号外面的不能访问到大括号里面的数据</p></blockquote><div class="hljs"><pre><code class="hljs angelscript">&#123;   <span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;   &#123;       <span class="hljs-built_in">int</span> b=<span class="hljs-number">1</span>;   &#125;   <span class="hljs-built_in">int</span> c=<span class="hljs-number">1</span>;&#125;</code></pre></div><hr><h1 id="对象作用域"><a href="#对象作用域" class="headerlink" title="对象作用域"></a>对象作用域</h1><blockquote><p>java对象作用域和基本数据类型的作用域不一样，<br>java对象是由jvm中的gc完成对象的销毁，<br>只要gc不清理那么java对象就会一直在内存中只不过无法访问，<br>不过我们通过特殊的方式完成Java对象的救助</p></blockquote><h2 id="在java对象中有一个特殊的方法"><a href="#在java对象中有一个特殊的方法" class="headerlink" title="在java对象中有一个特殊的方法"></a>在java对象中有一个特殊的方法</h2><div class="hljs"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        <span class="hljs-keyword">super</span>.finalize();    &#125;</code></pre></div><blockquote><p>我们可以这个方法完成java对象的自救</p></blockquote><div class="hljs"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo1</span> &#123;</span>    <span class="hljs-keyword">static</span> tem t;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;        t=<span class="hljs-keyword">new</span> tem();        t.name=<span class="hljs-string">"Hello"</span>;        t=null;        System.gc();        <span class="hljs-keyword">try</span> &#123;            Thread.sleep(<span class="hljs-number">1000</span>);        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.<span class="hljs-built_in">println</span>(t.name);        t=null;        System.gc();        <span class="hljs-keyword">try</span> &#123;            Thread.sleep(<span class="hljs-number">1000</span>);        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.<span class="hljs-built_in">println</span>(t.name);    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tem</span>&#123;</span>        <span class="hljs-keyword">String</span> name;        @Override        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> throws Throwable </span>&#123;            super.finalize();            t=<span class="hljs-keyword">this</span>;        &#125;    &#125;&#125;==》HelloException in thread <span class="hljs-string">"main"</span> java.lang.NullPointerExceptionat com.bYiyLi.BasicDataType.demo1.main(demo1.java:<span class="hljs-number">23</span>)<span class="hljs-built_in">Process</span> finished with <span class="hljs-built_in">exit</span> code <span class="hljs-number">1</span></code></pre></div><blockquote><p>当第一将t赋值为null时，<br>按照道理来说第一次 t.name就会报错<br>但是第一次却访问成功还打印出了Hello<br>可是第二次却失败了</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>finalize（）是由gc调用的方法<br>在方法中我们成功的将对象重新赋值给了t ，这样就自救成功。<br>但是这个方法只能被gc执行一遍<br>，这就是第二次自救失败的原因。这个方法很早之前就推荐不使用不过却没有移除。</p><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序对</title>
    <link href="/2020/07/19/Lisp/%E5%BA%8F%E5%AF%B9/"/>
    <url>/2020/07/19/Lisp/%E5%BA%8F%E5%AF%B9/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><blockquote><h3 id="let的一个用法"><a href="#let的一个用法" class="headerlink" title="let的一个用法"></a>let的一个用法</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">let</span> ((<span class="hljs-name">fun</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>) (<span class="hljs-name">+</span> <span class="hljs-number">1</span> x))))    (<span class="hljs-name">fun</span> <span class="hljs-number">2</span>))<span class="hljs-number">3</span></code></pre></div><blockquote><p>let 里面的属性也可以是lambda</p></blockquote><hr><h1 id="序对"><a href="#序对" class="headerlink" title="序对"></a>序对</h1><hr><blockquote><h2 id="cons"><a href="#cons" class="headerlink" title="cons"></a>cons</h2><p>一个特殊的数据结构<br>scheme中只能用两个<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs angelscript">&gt; (cons <span class="hljs-number">1</span> <span class="hljs-number">3</span>)(<span class="hljs-number">1</span> . <span class="hljs-number">3</span>)&gt; (cons <span class="hljs-number">1</span> <span class="hljs-number">77</span>)(<span class="hljs-number">1</span> . <span class="hljs-number">77</span>)</code></pre></div><blockquote><p>当使用三个的时候</p></blockquote><div class="hljs"><pre><code class="hljs routeros">&gt; (cons 1 2 3)Exception: incorrect argument count <span class="hljs-keyword">in</span> call (cons 1 2 3)Type (debug) <span class="hljs-keyword">to</span> enter the debugger.&gt;</code></pre></div><blockquote><h2 id="car"><a href="#car" class="headerlink" title="car"></a>car</h2><p>提取cons中的第一个<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">1</span>&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">cons</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>))<span class="hljs-number">2</span></code></pre></div><blockquote><h2 id="cdr"><a href="#cdr" class="headerlink" title="cdr"></a>cdr</h2><p>提取cons中的第二个<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">cdr</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">2</span>&gt; (<span class="hljs-name">cdr</span> (<span class="hljs-name">cons</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>))<span class="hljs-number">1</span></code></pre></div><hr><blockquote><h1 id="‘"><a href="#‘" class="headerlink" title="‘"></a>‘</h1><p>‘ 可以看成cons的升级版，不过没有个数限制 。但是还是有区别的<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; '(<span class="hljs-number">1</span> <span class="hljs-number">2</span>)(<span class="hljs-number">1</span> <span class="hljs-number">2</span>)&gt; '(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)</code></pre></div><blockquote><p>区别:</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (cons <span class="hljs-number">1</span> <span class="hljs-number">2</span>)(<span class="hljs-number">1</span> . <span class="hljs-number">2</span>)&gt; '(<span class="hljs-number">1</span> <span class="hljs-number">2</span>)(<span class="hljs-number">1</span> <span class="hljs-number">2</span>)</code></pre></div><blockquote><h2 id="car-1"><a href="#car-1" class="headerlink" title="car"></a>car</h2><p>‘ 的car是提取第一个<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (car '(<span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">1</span>&gt; (car '(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))<span class="hljs-number">1</span></code></pre></div><blockquote><h2 id="cdr-1"><a href="#cdr-1" class="headerlink" title="cdr"></a>cdr</h2><p>‘ 的cdr是提取出去第一个后的结果<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">cdr</span> '(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))(<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)&gt; (<span class="hljs-name">cdr</span> '(<span class="hljs-number">1</span>))()&gt; (<span class="hljs-name">cdr</span> '(<span class="hljs-number">1</span> <span class="hljs-number">2</span>))(<span class="hljs-number">2</span>)</code></pre></div><blockquote><p>car 与cdr 操作 ‘ 不能为空，至少有一个<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs routeros">&gt; (car <span class="hljs-string">'())</span><span class="hljs-string">Exception in car: () is not a pair</span><span class="hljs-string">Type (debug) to enter the debugger.</span><span class="hljs-string">&gt; (cdr '</span>())Exception <span class="hljs-keyword">in</span> cdr: () is <span class="hljs-keyword">not</span> a pairType (debug) <span class="hljs-keyword">to</span> enter the debugger.&gt; (cdr <span class="hljs-string">'(1))</span><span class="hljs-string">()</span><span class="hljs-string">&gt; (car '</span>(1))1</code></pre></div><hr><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><blockquote><h1 id="有理数"><a href="#有理数" class="headerlink" title="有理数"></a>有理数</h1><p>用cons完成</p><p>分数的表示和提取分子和分母</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">make_fraction</span> x y)    (<span class="hljs-name">cons</span> x y))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">numerator</span> z)    (<span class="hljs-name">car</span> z))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">denominator</span> z)    (<span class="hljs-name">cdr</span> z))&gt;</code></pre></div><blockquote><p>另一种方法</p></blockquote><div class="hljs"><pre><code class="hljs puppet">&gt; (<span class="hljs-keyword">define</span> <span class="hljs-section">make_fraction</span> cons)&gt; (<span class="hljs-keyword">define</span> <span class="hljs-section">denominator</span> cdr)&gt; (<span class="hljs-keyword">define</span> <span class="hljs-section">numerator</span> car)</code></pre></div><blockquote><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>显示后面的数据<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs routeros">&gt; (display <span class="hljs-string">"aaa"</span>)aaa&gt; (display <span class="hljs-string">"1/2"</span>)1/2</code></pre></div><blockquote><h2 id="有理数的加法"><a href="#有理数的加法" class="headerlink" title="有理数的加法"></a>有理数的加法</h2></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">add_fraction</span> x y)    (<span class="hljs-name">make_fraction</span> (<span class="hljs-name">+</span> (<span class="hljs-name">*</span> (<span class="hljs-name">numerator</span> x) (<span class="hljs-name">denominator</span> y))                      (<span class="hljs-name">*</span> (<span class="hljs-name">numerator</span> y) (<span class="hljs-name">denominator</span> x)))      (<span class="hljs-name">*</span> (<span class="hljs-name">denominator</span> x) (<span class="hljs-name">denominator</span> y))))&gt; (<span class="hljs-name">add_fraction</span> (<span class="hljs-name">make_fraction</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>) (<span class="hljs-name">make_fraction</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))(<span class="hljs-number">4</span> . <span class="hljs-number">4</span>)</code></pre></div><blockquote><h2 id="有理数的分数显示"><a href="#有理数的分数显示" class="headerlink" title="有理数的分数显示"></a>有理数的分数显示</h2></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">show_fraction</span> x)    (<span class="hljs-name">newline</span>)    (<span class="hljs-name">display</span> (<span class="hljs-name">numerator</span> x))    (<span class="hljs-name">display</span> <span class="hljs-string">"/"</span>)    (<span class="hljs-name">display</span> (<span class="hljs-name">denominator</span> x))    )&gt; (<span class="hljs-name">show_fraction</span> (<span class="hljs-name">make_fraction</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">1/2</span></code></pre></div><blockquote><p>缺点：当分母为负数的时候会出现</p></blockquote><div class="hljs"><pre><code class="hljs angelscript">&gt; (show_fraction (make_fraction <span class="hljs-number">1</span> <span class="hljs-number">-2</span>))<span class="hljs-number">1</span>/<span class="hljs-number">-2</span></code></pre></div><blockquote><h4 id="升级版："><a href="#升级版：" class="headerlink" title="升级版："></a>升级版：</h4></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">show_fraction</span> x)    (<span class="hljs-name">newline</span>)    (<span class="hljs-name">if</span> (<span class="hljs-name">&lt;</span> (<span class="hljs-name">*</span> (<span class="hljs-name">denominator</span> x) (<span class="hljs-name">numerator</span> x)) <span class="hljs-number">0</span>)        (<span class="hljs-name">display</span> <span class="hljs-string">"-"</span>))    (<span class="hljs-name">display</span> (<span class="hljs-name">abs</span> (<span class="hljs-name">numerator</span> x)))    (<span class="hljs-name">display</span> <span class="hljs-string">"/"</span>)    (<span class="hljs-name">display</span> (<span class="hljs-name">abs</span> (<span class="hljs-name">denominator</span> x))))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">abs</span> x)    (<span class="hljs-name">cond</span> ((<span class="hljs-name">&lt;</span> x <span class="hljs-number">0</span>) -x)))    &gt; (<span class="hljs-name">show_fraction</span> (<span class="hljs-name">make_fraction</span> <span class="hljs-number">1</span> <span class="hljs-number">-2</span>))<span class="hljs-number">-1/2</span></code></pre></div><blockquote><h3 id="再次完成有理数的加法"><a href="#再次完成有理数的加法" class="headerlink" title="再次完成有理数的加法"></a>再次完成有理数的加法</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">show_fraction</span> (<span class="hljs-name">add_fraction</span> (<span class="hljs-name">make_fraction</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>) (<span class="hljs-name">make_fraction</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)))<span class="hljs-number">10/8</span>&gt; (<span class="hljs-name">show_fraction</span> (<span class="hljs-name">add_fraction</span> (<span class="hljs-name">make_fraction</span> <span class="hljs-number">1</span> <span class="hljs-number">-2</span>) (<span class="hljs-name">make_fraction</span> <span class="hljs-number">3</span> <span class="hljs-number">-4</span>)))<span class="hljs-number">-10/8</span></code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用判断</title>
    <link href="/2020/07/19/Lisp/%E5%B8%B8%E7%94%A8%E5%88%A4%E6%96%AD/"/>
    <url>/2020/07/19/Lisp/%E5%B8%B8%E7%94%A8%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="eq"><a href="#eq" class="headerlink" title="eq?"></a>eq?</h1><p>用于判断两个符号是不是相同的符号</p><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">eq</span>? 'a 'a)#t&gt; (<span class="hljs-name">eq</span>? 'a 'b)#f&gt; (<span class="hljs-name">eq</span>? 'aa 'aa)#t&gt; (<span class="hljs-name">eq</span>? 'aac 'aac)#t</code></pre></div><hr><h1 id="memq"><a href="#memq" class="headerlink" title="memq"></a>memq</h1><p>用于检查符号是不是在表中如果在表中就返回这个符号第一次出现的那个子表</p><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">memq</span> 'a '(a b c))(<span class="hljs-name">a</span> b c)&gt; (<span class="hljs-name">memq</span> 'a '(<span class="hljs-number">1</span> <span class="hljs-number">2</span> a b c))(<span class="hljs-name">a</span> b c)&gt; (<span class="hljs-name">memq</span> 'a '(<span class="hljs-number">1</span> (a b) <span class="hljs-number">2</span> a b c))(<span class="hljs-name">a</span> b c)</code></pre></div><hr><h1 id="一些常用的判断"><a href="#一些常用的判断" class="headerlink" title="一些常用的判断"></a>一些常用的判断</h1><div class="hljs"><pre><code class="hljs applescript">pair? 如果对象为序对则返回<span class="hljs-comment">#t；</span><span class="hljs-built_in">list</span>? 如果对象是一个表则返回<span class="hljs-comment">#t。要小心的是空表’()是一个表但是不是一个序对。</span>null? 如果对象是空表’()的话就返回<span class="hljs-comment">#t。</span>symbol? 如果对象是一个符号则返回<span class="hljs-comment">#t。</span>char? 如果对象是一个字符则返回<span class="hljs-comment">#t。</span><span class="hljs-built_in">string</span>? 如果对象是一个字符串则返回<span class="hljs-comment">#t。</span><span class="hljs-built_in">number</span>? 如果对象是一个数字则返回<span class="hljs-comment">#t。</span>complex? 如果对象是一个复数则返回<span class="hljs-comment">#t。</span><span class="hljs-built_in">real</span>? 如果对象是一个实数则返回<span class="hljs-comment">#t。</span>rational? 如果对象是一个有理数则返回<span class="hljs-comment">#t。</span><span class="hljs-built_in">integer</span>? 如果对象是一个整数则返回<span class="hljs-comment">#t。</span>exact? 如果对象不是一个浮点数的话则返回<span class="hljs-comment">#t。</span>inexact? 如果对象是一个浮点数的话则返回<span class="hljs-comment">#t。</span></code></pre></div><hr><h1 id="赋值与局部状态"><a href="#赋值与局部状态" class="headerlink" title="赋值与局部状态"></a>赋值与局部状态</h1><h2 id="set！"><a href="#set！" class="headerlink" title="set！"></a>set！</h2><p>用于改变一个符号的值</p><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> a <span class="hljs-number">1</span>)&gt; (<span class="hljs-name">set!</span> a (<span class="hljs-name">+</span> <span class="hljs-number">1</span> a))&gt; a<span class="hljs-number">2</span>&gt; (<span class="hljs-name">set!</span> a (<span class="hljs-name">+</span> <span class="hljs-number">1</span> a))&gt; a<span class="hljs-number">3</span>&gt; (<span class="hljs-name">set!</span> a (<span class="hljs-name">+</span> <span class="hljs-number">1</span> a))&gt; a<span class="hljs-number">4</span></code></pre></div><h2 id="begin"><a href="#begin" class="headerlink" title="begin"></a>begin</h2><p>按照顺序求值把最后一个值作为整个begin返回</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (begin <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)<span class="hljs-number">4</span>&gt; (begin (define a <span class="hljs-number">1</span>) (define b <span class="hljs-number">2</span>) <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; a<span class="hljs-number">1</span>&gt; b<span class="hljs-number">2</span></code></pre></div><hr><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>模拟一个对象系统</p><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">new-a</span> a)    (<span class="hljs-name">let</span>      ((<span class="hljs-name">all</span> <span class="hljs-number">100</span>))      (<span class="hljs-name">lambda</span> (<span class="hljs-name">amount</span>)        (<span class="hljs-name">if</span> (<span class="hljs-name">&gt;=</span> all amount)            (<span class="hljs-name">begin</span> (<span class="hljs-name">set!</span> all (<span class="hljs-name">-</span> all amount))              all)            (<span class="hljs-name">display</span> <span class="hljs-string">"ERROR"</span>)))))                        &gt; (<span class="hljs-name">define</span> a (<span class="hljs-name">new-a</span> <span class="hljs-number">1</span>))&gt; (<span class="hljs-name">define</span> b (<span class="hljs-name">new-a</span> <span class="hljs-number">2</span>))&gt; (<span class="hljs-name">a</span> <span class="hljs-number">10</span>)<span class="hljs-number">90</span>&gt; (<span class="hljs-name">a</span> <span class="hljs-number">10</span>)<span class="hljs-number">80</span>&gt; (<span class="hljs-name">a</span> <span class="hljs-number">10</span>)<span class="hljs-number">70</span>&gt; (<span class="hljs-name">b</span> <span class="hljs-number">10</span>)<span class="hljs-number">90</span>&gt; (<span class="hljs-name">b</span> <span class="hljs-number">10</span>)<span class="hljs-number">80</span>&gt; (<span class="hljs-name">b</span> <span class="hljs-number">10</span>)<span class="hljs-number">70</span></code></pre></div><hr><h1 id="set-car与cet-cdr"><a href="#set-car与cet-cdr" class="headerlink" title="set-car与cet-cdr"></a>set-car与cet-cdr</h1><blockquote><p>cons，car 与 cdr是构造序对，<br>可是不能更改序对，<br>set-car与set-cdr是更改序对，<br>改变序对的结构</p></blockquote><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>有代码：</p><div class="hljs"><pre><code class="hljs lsl">&gt; (define list1 (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))&gt; (define list2 (<span class="hljs-type">list</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>))&gt; list1(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)&gt; list2(<span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>)&gt; (set-car! list1 list2)&gt; list1((<span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>) <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)&gt; list2(<span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>)&gt; (set-car! list2 <span class="hljs-number">0</span>)&gt; list2(<span class="hljs-number">0</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>)&gt; list1((<span class="hljs-number">0</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>) <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)&gt; (set-car! (car list1) <span class="hljs-number">1</span>)&gt; list1((<span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>) <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)&gt; list2(<span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>)</code></pre></div><blockquote><p>在代码中<br>对list2更改数据结构，<br>在list1中也会同时更改<br>，<br>因为他们是同一个元素<br>，<br>同理<br>，<br>对list1的第一个元素中的数据更改<br>也会改变list2的数据</p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对表对树</title>
    <link href="/2020/07/19/Lisp/%E5%AF%B9%E8%A1%A8%E5%AF%B9%E6%A0%91/"/>
    <url>/2020/07/19/Lisp/%E5%AF%B9%E8%A1%A8%E5%AF%B9%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h2 id="可变长的参数"><a href="#可变长的参数" class="headerlink" title="可变长的参数"></a>可变长的参数</h2><div class="hljs"><pre><code class="hljs gcode"><span class="hljs-comment">(a b c)</span> <span class="hljs-comment">//这里是固定参数 b c</span><span class="hljs-comment">(a b c . d)</span> <span class="hljs-comment">//这里就是可变长参数 d</span></code></pre></div><blockquote><p>在（a b c . d）中b c 是正常的参数 ，然而d是一个列表</p></blockquote><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><blockquote><p>一个简单的加法最少两个数的加法</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">add</span> a b . c)    (<span class="hljs-name">define</span> (<span class="hljs-name">tem-add</span> x y l li)       (<span class="hljs-name">if</span> (<span class="hljs-name">=</span> l <span class="hljs-number">0</span>)          (<span class="hljs-name">+</span> x y)         (<span class="hljs-name">tem-add</span> (<span class="hljs-name">+</span> x y) (<span class="hljs-name">car</span> li) (<span class="hljs-name">-</span> l <span class="hljs-number">1</span>) (<span class="hljs-name">cdr</span> li))))    (<span class="hljs-name">let</span> ((<span class="hljs-name">len</span> (<span class="hljs-name">length</span> c)))      (<span class="hljs-name">tem-add</span> a b len c)))&gt; (<span class="hljs-name">add</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)<span class="hljs-number">6</span>&gt; (<span class="hljs-name">add</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)<span class="hljs-number">10</span>&gt; (<span class="hljs-name">add</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)<span class="hljs-number">5</span>&gt; (<span class="hljs-name">add</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>)<span class="hljs-number">45</span></code></pre></div><h1 id="对表的映射"><a href="#对表的映射" class="headerlink" title="对表的映射"></a>对表的映射</h1><blockquote><p>将某个操作用于一个表</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (define (map li a)    (if (null? li)        (<span class="hljs-type">list</span>)        (cons (+ (car li) a)          (map (cdr li) a))))&gt; (map (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>) <span class="hljs-number">20</span>)(<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>)&gt; (map (<span class="hljs-type">list</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>) <span class="hljs-number">10</span>)(<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span>)</code></pre></div><h1 id="层次性结构"><a href="#层次性结构" class="headerlink" title="层次性结构"></a>层次性结构</h1><blockquote><h2 id="对象-1-2-3-4"><a href="#对象-1-2-3-4" class="headerlink" title="对象((1 2) 3 4)"></a>对象((1 2) 3 4)</h2><p>可以认为是(cons (list 1 2) (list 3 4)) 构造出来的<br>这也是一种树<br>(list 1 2) 3 4 是在第一层<br>1 2 是在第二层</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (length (cons (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>)))<span class="hljs-number">6</span>&gt; (length (car (cons (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>))))<span class="hljs-number">3</span>&gt; (length (cdr (cons (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>))))<span class="hljs-number">5</span>&gt; (length (cdr (cdr (cons (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>)))))<span class="hljs-number">4</span></code></pre></div><h3 id="length计算这个节点的子节点个数"><a href="#length计算这个节点的子节点个数" class="headerlink" title="length计算这个节点的子节点个数"></a>length计算这个节点的子节点个数</h3><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">length</span> (<span class="hljs-name">list</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-name">list</span> <span class="hljs-number">23</span>)))<span class="hljs-number">2</span></code></pre></div><h1 id="pair-是scheme中判断操作数是不是序对"><a href="#pair-是scheme中判断操作数是不是序对" class="headerlink" title="pair? 是scheme中判断操作数是不是序对"></a>pair? 是scheme中判断操作数是不是序对</h1><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">pair</span>? <span class="hljs-number">1</span>)#f&gt; (<span class="hljs-name">pair</span>? (<span class="hljs-name">list</span>))#f&gt; (<span class="hljs-name">pair</span>? (<span class="hljs-name">list</span> <span class="hljs-number">1</span>))#t&gt; (<span class="hljs-name">pair</span>? (<span class="hljs-name">list</span> <span class="hljs-number">2</span>))#t</code></pre></div><h3 id="现在构造一个过程count-leaves-用来计算一个数的所有树叶的个数"><a href="#现在构造一个过程count-leaves-用来计算一个数的所有树叶的个数" class="headerlink" title="现在构造一个过程count-leaves 用来计算一个数的所有树叶的个数"></a>现在构造一个过程count-leaves 用来计算一个数的所有树叶的个数</h3><div class="hljs"><pre><code class="hljs lsl">&gt; (define (count-leaves tree)    (cond      ((null? tree) <span class="hljs-number">0</span>)      ((not (pair? tree)) <span class="hljs-number">1</span>)      (else (+ (count-leaves (car tree))                (count-leaves (cdr tree)))))))&gt; (count-leaves (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))<span class="hljs-number">4</span>&gt; (count-leaves (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)))<span class="hljs-number">6</span>&gt; (length (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)))<span class="hljs-number">4</span>&gt; (length (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))<span class="hljs-number">4</span></code></pre></div><blockquote><h3 id="不过这个是递归版"><a href="#不过这个是递归版" class="headerlink" title="不过这个是递归版"></a>不过这个是递归版</h3><h3 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版:"></a>迭代版:</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">count-leaves</span> tree)    (<span class="hljs-name">define</span> (<span class="hljs-name">fun</span> count tree-tem all-tem)      (<span class="hljs-name">if</span> (<span class="hljs-name">pair</span>? tree-tem)        (<span class="hljs-name">if</span> (<span class="hljs-name">=</span> (<span class="hljs-name">length</span> tree-tem) <span class="hljs-number">1</span>)            (<span class="hljs-name">fun</span> count (<span class="hljs-name">car</span> tree-tem) all-tem)            (<span class="hljs-name">fun</span> count (<span class="hljs-name">car</span> tree-tem) (<span class="hljs-name">cons</span> (<span class="hljs-name">cdr</span> tree-tem) all-tem)))        (<span class="hljs-name">if</span> (<span class="hljs-name">pair</span>? all-tem)            (<span class="hljs-name">fun</span> (<span class="hljs-name">+</span> <span class="hljs-number">1</span> count) (<span class="hljs-name">car</span> all-tem) (<span class="hljs-name">cdr</span> all-tem))            count)))    (<span class="hljs-name">if</span> (<span class="hljs-name">pair</span>? tree)        (<span class="hljs-name">fun</span> <span class="hljs-number">1</span> (<span class="hljs-name">car</span> tree) (<span class="hljs-name">cdr</span> tree))        <span class="hljs-number">0</span>))&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">2</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)))<span class="hljs-number">4</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span>)))<span class="hljs-number">3</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) (<span class="hljs-name">list</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) <span class="hljs-number">1</span> <span class="hljs-number">1</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>))))<span class="hljs-number">10</span>(<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> (<span class="hljs-name">list</span> (<span class="hljs-name">list</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-number">1</span>))<span class="hljs-number">4</span></code></pre></div><h4 id="其中第六行-cons-可以用append代替"><a href="#其中第六行-cons-可以用append代替" class="headerlink" title="其中第六行 cons 可以用append代替"></a>其中第六行 cons 可以用append代替</h4><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">count-leaves</span> tree)    (<span class="hljs-name">define</span> (<span class="hljs-name">fun</span> count tree-tem all-tem)      (<span class="hljs-name">if</span> (<span class="hljs-name">pair</span>? tree-tem)        (<span class="hljs-name">if</span> (<span class="hljs-name">=</span> (<span class="hljs-name">length</span> tree-tem) <span class="hljs-number">1</span>)            (<span class="hljs-name">fun</span> count (<span class="hljs-name">car</span> tree-tem) all-tem)            (<span class="hljs-name">fun</span> count (<span class="hljs-name">car</span> tree-tem) (<span class="hljs-name">append</span> (<span class="hljs-name">cdr</span> tree-tem) all-tem)))        (<span class="hljs-name">if</span> (<span class="hljs-name">pair</span>? all-tem)            (<span class="hljs-name">fun</span> (<span class="hljs-name">+</span> <span class="hljs-number">1</span> count) (<span class="hljs-name">car</span> all-tem) (<span class="hljs-name">cdr</span> all-tem))            count)))    (<span class="hljs-name">if</span> (<span class="hljs-name">pair</span>? tree)        (<span class="hljs-name">fun</span> <span class="hljs-number">1</span> (<span class="hljs-name">car</span> tree) (<span class="hljs-name">cdr</span> tree))        <span class="hljs-number">0</span>))&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span>))<span class="hljs-number">1</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))<span class="hljs-number">3</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)))<span class="hljs-number">7</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>))))<span class="hljs-number">9</span>&gt; (<span class="hljs-name">count-leaves</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> (<span class="hljs-name">list</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span>) <span class="hljs-number">2</span> <span class="hljs-number">3</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>))))<span class="hljs-number">12</span></code></pre></div><hr><blockquote><h1 id="append"><a href="#append" class="headerlink" title="append"></a>append</h1><p>将表的内容连接起来</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (append (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">1</span>))(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>)&gt; (append (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">1</span>) (<span class="hljs-type">list</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>))(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>)&gt; (append (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) (<span class="hljs-type">list</span> (<span class="hljs-type">list</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>) (<span class="hljs-type">list</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span>)))(<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> (<span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>) (<span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span>))</code></pre></div><blockquote><h1 id="cons"><a href="#cons" class="headerlink" title="cons"></a>cons</h1><p>将第一个表加入到第二个表里</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (cons (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>) (<span class="hljs-type">list</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> ))((<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>) <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span>)</code></pre></div><blockquote><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>将表连接起来形成新的表</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (<span class="hljs-type">list</span> (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) (<span class="hljs-type">list</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>))((<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) (<span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>))</code></pre></div><h1 id="对树的映射"><a href="#对树的映射" class="headerlink" title="对树的映射"></a>对树的映射</h1><blockquote><p>与对表的映射差不多</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">scale-tree</span> tree factor)    (<span class="hljs-name">cond</span>      ((<span class="hljs-name">null</span>? tree) (<span class="hljs-name">list</span>))      ((<span class="hljs-name">not</span> (<span class="hljs-name">pair</span>? tree)) (<span class="hljs-name">+</span> factor tree))      (<span class="hljs-name">else</span> (<span class="hljs-name">cons</span>               (<span class="hljs-name">scale-tree</span> (<span class="hljs-name">car</span> tree) factor)              (<span class="hljs-name">scale-tree</span> (<span class="hljs-name">cdr</span> tree) factor)))))&gt; (<span class="hljs-name">scale-tree</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> (<span class="hljs-name">list</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>) (<span class="hljs-name">list</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> (<span class="hljs-name">list</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span>))) <span class="hljs-number">10</span>)(<span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> (<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>) (<span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> (<span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">10</span>)))</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本语法define与cond</title>
    <link href="/2020/07/19/Lisp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95define%E4%B8%8Econd/"/>
    <url>/2020/07/19/Lisp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95define%E4%B8%8Econd/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="开始Lisp"><a href="#开始Lisp" class="headerlink" title="开始Lisp"></a>开始Lisp</h1><hr><hr><h2 id="基本加减乘除"><a href="#基本加减乘除" class="headerlink" title="基本加减乘除"></a>基本加减乘除</h2><blockquote><h3 id="加"><a href="#加" class="headerlink" title="加"></a>加</h3><p>&gt;(+ 1 2)<br>3</p><h3 id="减"><a href="#减" class="headerlink" title="减"></a>减</h3><p>&gt;(- 2 1)<br>1</p><h3 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h3><p>&gt;(* 1 2 3)<br>6</p><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><p>&gt;(/ 4 2)<br>2</p></blockquote><blockquote><hr></blockquote><h1 id="define"><a href="#define" class="headerlink" title="define"></a>define</h1><blockquote><p>定义一个事物<br>&gt;(define size 2)<br>&gt;size<br>2<br>&gt;(* size 3)<br>6</p><p>定义成无参<br>&gt;(define fun (+ size 1)<br>&gt;fun<br>3<br>定义成有参<br>&gt; (define (fun1 x y) (* x y)<br>&gt; (fun1 2 3)<br>6<br>复合语句<br>&gt; (define fun11 (fun1 2 3))<br>&gt; fun11<br>6</p></blockquote><blockquote><hr></blockquote><h1 id="应用序与正则序"><a href="#应用序与正则序" class="headerlink" title="应用序与正则序"></a>应用序与正则序</h1><blockquote><h3 id="复合语句中"><a href="#复合语句中" class="headerlink" title="复合语句中"></a>复合语句中</h3><blockquote><p>应用序：先求值后展开<br>正则序：全部展开后在求值（会重复求值，效率有点低）</p></blockquote></blockquote><blockquote><hr></blockquote><h1 id="条件表达式和谓词"><a href="#条件表达式和谓词" class="headerlink" title="条件表达式和谓词"></a>条件表达式和谓词</h1><blockquote><h2 id="cond-条件"><a href="#cond-条件" class="headerlink" title="cond (条件)"></a>cond (条件)</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>: (cond (<p1><e1>)(<p2><e2>)…)<br>例： 一个数的绝对值</e2></p2></e1></p1></p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">abs</span> x)    (<span class="hljs-name">cond</span> ((<span class="hljs-name">&gt;</span> x <span class="hljs-number">0</span>) x)        ((<span class="hljs-name">=</span> x <span class="hljs-number">0</span>) <span class="hljs-number">0</span>)        ((<span class="hljs-name">&lt;</span> x <span class="hljs-number">0</span>) (<span class="hljs-name">-</span> <span class="hljs-number">0</span> x))))&gt; (<span class="hljs-name">abs</span> <span class="hljs-number">2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">abs</span> <span class="hljs-number">-2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">abs</span> <span class="hljs-number">0</span>)<span class="hljs-number">0</span></code></pre></div><blockquote><h3 id="else-前面没有匹配到-lt-p-gt-就进入这个"><a href="#else-前面没有匹配到-lt-p-gt-就进入这个" class="headerlink" title="else(前面没有匹配到&lt;p&gt;就进入这个)"></a>else(前面没有匹配到&lt;p&gt;就进入这个<e>)</e></h3><blockquote><p>例 ： 绝对值else版</p></blockquote></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">abs1</span> x)     (<span class="hljs-name">cond</span> ((<span class="hljs-name">&gt;</span> x <span class="hljs-number">0</span>) x)      (<span class="hljs-name">else</span> (<span class="hljs-name">-</span> <span class="hljs-number">0</span> x))))      &gt; (<span class="hljs-name">abs1</span> <span class="hljs-number">2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">abs1</span> <span class="hljs-number">-2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">abs1</span> <span class="hljs-number">-0</span>)<span class="hljs-number">0</span></code></pre></div><blockquote><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>: (if (条件) (为真的时候)(为假的时候))</p><blockquote><p>例:<br>绝对值 if 版</p></blockquote></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">abs</span> x)    (<span class="hljs-name">if</span> (<span class="hljs-name">&gt;</span> x <span class="hljs-number">0</span>)        x        (<span class="hljs-name">-</span> <span class="hljs-number">0</span> x)))&gt; (<span class="hljs-name">abs</span> <span class="hljs-number">2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">abs</span> <span class="hljs-number">-2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">abs</span> <span class="hljs-number">0</span>)<span class="hljs-number">0</span></code></pre></div><blockquote><h2 id="复合运算符"><a href="#复合运算符" class="headerlink" title="复合运算符"></a>复合运算符</h2><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>语法：<br>(and (条件1) (条件2) (条件3)…)<br>有阻断效果(如果条件2是假那么条件3就不会执行)<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">if</span> (<span class="hljs-name">and</span> (<span class="hljs-name">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>) (<span class="hljs-name">=</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>)) <span class="hljs-number">1</span> <span class="hljs-number">0</span>)<span class="hljs-number">1</span></code></pre></div><blockquote><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>语法：<br>(or (条件1) (条件2) (条件3)…)<br>也有阻断效果<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">if</span> (<span class="hljs-name">or</span> (<span class="hljs-name">=</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>) (<span class="hljs-name">=</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>))  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>)<span class="hljs-number">1</span></code></pre></div><blockquote><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p>语法:<br>(not (条件)) (真的变假，假的变真)<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">if</span> (<span class="hljs-name">not</span> (<span class="hljs-name">=</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)) <span class="hljs-number">1</span> <span class="hljs-number">0</span>)<span class="hljs-number">1</span></code></pre></div><hr><h1 id="线性的递归与迭代"><a href="#线性的递归与迭代" class="headerlink" title="线性的递归与迭代"></a>线性的递归与迭代</h1><blockquote><h2 id="计算n！"><a href="#计算n！" class="headerlink" title="计算n！"></a>计算n！</h2><h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">n!</span> x)     (<span class="hljs-name">if</span> (<span class="hljs-name">=</span> x <span class="hljs-number">1</span>)        <span class="hljs-number">1</span>        (<span class="hljs-name">*</span> x (<span class="hljs-name">n!</span> (<span class="hljs-name">-</span> x <span class="hljs-number">1</span>)))))&gt; (<span class="hljs-name">n!</span> <span class="hljs-number">3</span>)<span class="hljs-number">6</span>&gt; (<span class="hljs-name">n!</span> <span class="hljs-number">5</span>)<span class="hljs-number">120</span></code></pre></div><blockquote><h3 id="迭代："><a href="#迭代：" class="headerlink" title="迭代："></a>迭代：</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fun</span> r n  x)    (<span class="hljs-name">if</span> (<span class="hljs-name">&gt;</span> n x)        r        (<span class="hljs-name">fun</span> (<span class="hljs-name">*</span> r n) (<span class="hljs-name">+</span> n <span class="hljs-number">1</span>) x)))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">x!</span> n)    (<span class="hljs-name">fun</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> n))&gt; (<span class="hljs-name">x!</span> <span class="hljs-number">3</span>)<span class="hljs-number">6</span>&gt; (<span class="hljs-name">x!</span> <span class="hljs-number">5</span>)<span class="hljs-number">120</span></code></pre></div><blockquote><h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p>迭代：先计算然后调用下一个 ，这样计算机需要保存的数据就会很少。 （有点类似for 。 while）<br>递归：先把生成完整的算式然后在计算，这样计算机要保存的数据就会很多，更加占用资源。（有点类似其他语言的函数调用）</p></blockquote><blockquote><hr></blockquote><blockquote><h2 id="树形递归"><a href="#树形递归" class="headerlink" title="树形递归"></a>树形递归</h2><h3 id="斐波那契数序"><a href="#斐波那契数序" class="headerlink" title="斐波那契数序"></a>斐波那契数序</h3><h4 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h4></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fib</span> n)    (<span class="hljs-name">cond</span> ((<span class="hljs-name">=</span> n <span class="hljs-number">0</span>) <span class="hljs-number">0</span>)      ((<span class="hljs-name">=</span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>)      (<span class="hljs-name">else</span> (<span class="hljs-name">+</span> (<span class="hljs-name">fib</span> (<span class="hljs-name">-</span> n <span class="hljs-number">1</span>))               (<span class="hljs-name">fib</span> (<span class="hljs-name">-</span> n <span class="hljs-number">2</span>))))))&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">2</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">9</span>)<span class="hljs-number">34</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">5</span>)<span class="hljs-number">5</span></code></pre></div><blockquote><hr></blockquote><blockquote><h2 id="线性迭代"><a href="#线性迭代" class="headerlink" title="线性迭代"></a>线性迭代</h2><h3 id="斐波那契数序-1"><a href="#斐波那契数序-1" class="headerlink" title="斐波那契数序"></a>斐波那契数序</h3><h4 id="例-1"><a href="#例-1" class="headerlink" title="例:"></a>例:</h4></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">tem</span> f s <span class="hljs-literal">t</span> n)      (<span class="hljs-name">cond</span> ((<span class="hljs-name">=</span> <span class="hljs-literal">t</span> n) f)        (<span class="hljs-name">else</span> (<span class="hljs-name">tem</span> s (<span class="hljs-name">+</span> f s) (<span class="hljs-name">+</span> <span class="hljs-literal">t</span> <span class="hljs-number">1</span>) n))))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fib</span> n)    (<span class="hljs-name">tem</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> n))&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">0</span>)<span class="hljs-number">0</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">2</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">3</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">4</span>)<span class="hljs-number">3</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">5</span>)<span class="hljs-number">5</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">9</span>)<span class="hljs-number">34</span></code></pre></div><blockquote><p>书上代码：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fib</span> n)    (<span class="hljs-name">fib-iter</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> n))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fib-iter</span> a b count)    (<span class="hljs-name">if</span> (<span class="hljs-name">=</span> count <span class="hljs-number">0</span>)        b        (<span class="hljs-name">fib-iter</span> (<span class="hljs-name">+</span> a b) a (<span class="hljs-name">-</span> count <span class="hljs-number">1</span>))))&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">2</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">3</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">fib</span> <span class="hljs-number">9</span>)<span class="hljs-number">34</span></code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本函数</title>
    <link href="/2020/07/19/Lisp/%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0/"/>
    <url>/2020/07/19/Lisp/%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="How-to-Design-Programs"><a href="#How-to-Design-Programs" class="headerlink" title="How to Design Programs"></a>How to Design Programs</h1><h2 id="一些基本的函数"><a href="#一些基本的函数" class="headerlink" title="一些基本的函数"></a>一些基本的函数</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><p>string-append :将多个string连接起来</p><div class="hljs"><pre><code class="hljs go">&gt;(<span class="hljs-keyword">string</span>-<span class="hljs-built_in">append</span> <span class="hljs-string">"hello"</span> <span class="hljs-string">"word"</span>)helloword</code></pre></div></li></ul><ul><li><p>string-length :计算string的字符个数</p><div class="hljs"><pre><code class="hljs applescript">&gt;(<span class="hljs-built_in">string</span>-<span class="hljs-built_in">length</span> <span class="hljs-string">"helloword"</span>)<span class="hljs-number">9</span></code></pre></div></li></ul><ul><li><p>string-&gt;number: 将string转化成数字</p><div class="hljs"><pre><code class="hljs autoit">&gt; (<span class="hljs-built_in">string</span>-&gt;<span class="hljs-built_in">number</span> <span class="hljs-string">"42"</span>)<span class="hljs-number">42</span></code></pre></div></li><li><p>string=? : 判断string是不是一样的</p><div class="hljs"><pre><code class="hljs routeros">&gt; (<span class="hljs-attribute">string</span>=? <span class="hljs-string">"hello"</span> <span class="hljs-string">"hello"</span>)<span class="hljs-comment">#t</span>&gt; (<span class="hljs-attribute">string</span>=? <span class="hljs-string">"hello"</span> <span class="hljs-string">"Hello"</span>)<span class="hljs-comment">#f</span></code></pre></div></li><li><p>string-ith : 返回一个字符串第几个位置出现的字符</p><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">string-ith</span> <span class="hljs-string">"hello world"</span> <span class="hljs-number">1</span>)<span class="hljs-string">"e"</span></code></pre></div></li></ul><hr><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><ul><li><p>and ：同时为T的时候为真</p><div class="hljs"><pre><code class="hljs clean">&gt; (and #t #t)#t&gt; (and #f #t)#f</code></pre></div></li><li><p>or : 有一个以上T的时候为真</p><div class="hljs"><pre><code class="hljs less">&gt; (or #t <span class="hljs-number">#f</span>)<span class="hljs-selector-id">#t</span>&gt; (or <span class="hljs-number">#f</span> <span class="hljs-number">#f</span>)<span class="hljs-selector-id">#f</span></code></pre></div></li><li><p>not : 取反 ，真时为假，假时为真</p><div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> (not <span class="hljs-comment">#f)</span></span><span class="hljs-meta">#</span><span class="bash">t</span><span class="hljs-meta">&gt;</span><span class="bash"> (not <span class="hljs-comment">#t)</span></span><span class="hljs-meta">#</span><span class="bash">f</span></code></pre></div></li><li><p>也可以用数学判断符号</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (&gt; <span class="hljs-number">10</span> <span class="hljs-number">9</span>)#<span class="hljs-literal">true</span>&gt; (&lt; <span class="hljs-number">-1</span> <span class="hljs-number">0</span>)#<span class="hljs-literal">true</span>&gt; (= <span class="hljs-number">42</span> <span class="hljs-number">9</span>)#<span class="hljs-literal">false</span></code></pre></div><p>注意scheme中的= ， 不是其他语言中的赋值，而字面上的意思，判断操作数是否相等，和其他语言的==差不多，可是也有不同。</p></li></ul><hr><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><ul><li><p>+</p></li><li><p>-</p></li><li><p>*</p></li><li><p>/</p></li><li><p>abs</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (abs <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; (abs <span class="hljs-number">-1</span>)<span class="hljs-number">1</span></code></pre></div><p>绝对值</p></li><li><p>add1</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (abs <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; (abs <span class="hljs-number">-1</span>)<span class="hljs-number">1</span></code></pre></div><p>加一</p></li><li><p>ceiling</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (ceiling <span class="hljs-number">12.3</span>)<span class="hljs-number">13.0</span>&gt; (ceiling <span class="hljs-number">14.3</span>)<span class="hljs-number">15.0</span>&gt; (ceiling <span class="hljs-number">14</span>)<span class="hljs-number">14</span></code></pre></div><p>大于参数的最小整数</p></li><li><p>denominator</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (denominator <span class="hljs-number">2</span>/<span class="hljs-number">4</span>)<span class="hljs-number">2</span>&gt; (denominator <span class="hljs-number">2</span>/<span class="hljs-number">6</span>)<span class="hljs-number">3</span>&gt; (denominator <span class="hljs-number">2</span>/<span class="hljs-number">2</span>)<span class="hljs-number">1</span>&gt; (denominator <span class="hljs-number">2</span>/<span class="hljs-number">7</span>)<span class="hljs-number">7</span>&gt; (denominator (/ <span class="hljs-number">2</span> <span class="hljs-number">7</span>))<span class="hljs-number">7</span>&gt; (denominator (/ <span class="hljs-number">2</span> <span class="hljs-number">9</span>))<span class="hljs-number">9</span>&gt; (denominator <span class="hljs-number">0.5</span>)<span class="hljs-number">2.0</span></code></pre></div><p>Computes the denominator of a rational.计算有理数的分母</p></li><li><p>exact-&gt;inexact</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (exact-&gt;inexact <span class="hljs-number">0.9</span>)<span class="hljs-number">0.9</span>&gt; (exact-&gt;inexact <span class="hljs-number">222</span>)<span class="hljs-number">222.0</span>&gt; (exact-&gt;inexact <span class="hljs-number">22233</span>)<span class="hljs-number">22233.0</span>&gt; (exact-&gt;inexact <span class="hljs-number">1</span>/<span class="hljs-number">3</span>)<span class="hljs-number">0.3333333333333333</span>&gt; (exact-&gt;inexact (/ <span class="hljs-number">1</span> <span class="hljs-number">3</span>))<span class="hljs-number">0.3333333333333333</span></code></pre></div><p>将精确的数字变成不精确的</p></li><li><p>expt</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (expt <span class="hljs-number">1</span> <span class="hljs-number">2</span>)<span class="hljs-number">1</span>&gt; (expt <span class="hljs-number">2</span> <span class="hljs-number">2</span>)<span class="hljs-number">4</span>&gt; (expt <span class="hljs-number">2</span> <span class="hljs-number">3</span>)<span class="hljs-number">8</span>&gt; (expt <span class="hljs-number">6</span> <span class="hljs-number">3</span>)<span class="hljs-number">216</span>&gt; (expt <span class="hljs-number">2</span> <span class="hljs-number">10</span>)<span class="hljs-number">1024</span></code></pre></div><p>(expt x y) 计算x的y次方</p></li><li><p>floor</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (floor <span class="hljs-number">1.2</span>)<span class="hljs-number">1.0</span>&gt; (floor <span class="hljs-number">1.7</span>)<span class="hljs-number">1.0</span>&gt; (floor <span class="hljs-number">1.3</span>)<span class="hljs-number">1.0</span>&gt; (floor <span class="hljs-number">-1.3</span>)<span class="hljs-number">-2.0</span></code></pre></div><p>小于参数的最大整数</p></li><li><p>gcd</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (gcd <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">20</span>)<span class="hljs-number">5</span>&gt; (gcd <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">22</span>)<span class="hljs-number">1</span>&gt; (gcd <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">24</span>)<span class="hljs-number">1</span>&gt; (gcd <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">25</span>)<span class="hljs-number">5</span>&gt; (gcd <span class="hljs-number">12</span> <span class="hljs-number">15</span> <span class="hljs-number">24</span>)<span class="hljs-number">3</span></code></pre></div><p>计算最大公约数</p></li><li><p>log</p><div class="hljs"><pre><code class="hljs angelscript">&gt; (log <span class="hljs-number">2.8</span>)<span class="hljs-number">1.0296194171811581</span>&gt; (log <span class="hljs-number">2.71</span>)<span class="hljs-number">0.9969486348916096</span>&gt; (log <span class="hljs-number">2.72</span>)<span class="hljs-number">1.000631880307906</span>&gt; (log <span class="hljs-number">2.712</span>)<span class="hljs-number">0.9976863700781492</span>&gt; (log <span class="hljs-number">2.713</span>)<span class="hljs-number">0.9980550336767947</span>&gt; (log <span class="hljs-number">2.713</span>)<span class="hljs-number">0.9980550336767947</span></code></pre></div><p>计算log值</p></li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>List基础</title>
    <link href="/2020/07/19/Lisp/list/"/>
    <url>/2020/07/19/Lisp/list/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><blockquote><p>car cdr cons 用来操作序对<br>然而如果用序对写成</p></blockquote><div class="hljs"><pre><code class="hljs angelscript">&gt; (cons <span class="hljs-number">1</span> (cons <span class="hljs-number">2</span> (cons <span class="hljs-number">3</span> <span class="hljs-number">4</span>)))(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> . <span class="hljs-number">4</span>)</code></pre></div><blockquote><p>就是一个简单的树<br>car 用来访问左孩子<br>cdr 用来访问右孩子<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> tem1 (<span class="hljs-name">cons</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>) (<span class="hljs-name">cons</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)))&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">car</span> tem1))<span class="hljs-number">1</span>&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">cdr</span> tem1))<span class="hljs-number">3</span>&gt; (<span class="hljs-name">cdr</span> (<span class="hljs-name">car</span> tem1))<span class="hljs-number">2</span></code></pre></div><h1 id="‘"><a href="#‘" class="headerlink" title="‘"></a>‘</h1><blockquote><p>进一步说明 ：<br>‘ car 操作 ‘ 就是获取第一个元素<br>‘ cdr操作’ 就是获取除了第一个元素的其他所有元素</p><h2 id="使用这种cons嵌套来的序对系列叫做表"><a href="#使用这种cons嵌套来的序对系列叫做表" class="headerlink" title="使用这种cons嵌套来的序对系列叫做表"></a>使用这种cons嵌套来的序对系列叫做表</h2><p>scheme 为了方便构造可以用list基本操作</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>)&gt; (cons <span class="hljs-number">1</span> (cons <span class="hljs-number">2</span> (cons <span class="hljs-number">3</span> <span class="hljs-number">4</span>)))(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> . <span class="hljs-number">4</span>)</code></pre></div><blockquote><h2 id="null？操作用于判断表是不是空表"><a href="#null？操作用于判断表是不是空表" class="headerlink" title="null？操作用于判断表是不是空表"></a>null？操作用于判断表是不是空表</h2></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> list1 (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>))&gt; (<span class="hljs-name">if</span> (<span class="hljs-name">null</span>? list1)      <span class="hljs-number">0</span>       <span class="hljs-number">1</span>)<span class="hljs-number">1</span></code></pre></div><blockquote><h2 id="length-用于返回表中的数据有多少"><a href="#length-用于返回表中的数据有多少" class="headerlink" title="length 用于返回表中的数据有多少"></a>length 用于返回表中的数据有多少</h2></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">length</span> list1)<span class="hljs-number">3</span></code></pre></div><blockquote><h3 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h3><p>length实现可以用递归</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">length</span> tem)    (<span class="hljs-name">define</span> (<span class="hljs-name">len</span> a count)      (<span class="hljs-name">if</span> (<span class="hljs-name">null</span>? a)          count          (<span class="hljs-name">len</span> (<span class="hljs-name">cdr</span> a) (<span class="hljs-name">+</span> <span class="hljs-number">1</span> count))))    (<span class="hljs-name">len</span> tem <span class="hljs-number">0</span>))&gt; (<span class="hljs-name">length</span> list1)<span class="hljs-number">3</span></code></pre></div><blockquote><h2 id="两个表的合并"><a href="#两个表的合并" class="headerlink" title="两个表的合并"></a>两个表的合并</h2><p>递归版：</p></blockquote><div class="hljs"><pre><code class="hljs lsl">&gt; (add-<span class="hljs-type">list</span> (<span class="hljs-type">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-type">list</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>))(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>)</code></pre></div><blockquote><p>迭代版：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">add-list</span> l1 l2)    (<span class="hljs-name">if</span> (<span class="hljs-name">null</span>? l1)        l2        (<span class="hljs-name">add-list</span> (<span class="hljs-name">cdr</span> l1) (<span class="hljs-name">cons</span> (<span class="hljs-name">car</span> l1) l2))))&gt; (<span class="hljs-name">add-list</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) (<span class="hljs-name">list</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>))(<span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>)</code></pre></div><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><blockquote><h3 id="定义过程last-pair-，返回只包含给定非空表的最后一个元素"><a href="#定义过程last-pair-，返回只包含给定非空表的最后一个元素" class="headerlink" title="定义过程last-pair ，返回只包含给定非空表的最后一个元素"></a>定义过程last-pair ，返回只包含给定非空表的最后一个元素</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">last-pair</span> tem)    (<span class="hljs-name">cond</span> ((<span class="hljs-name">null</span>? tem) (<span class="hljs-name">display</span> <span class="hljs-string">"null"</span>))      ((<span class="hljs-name">=</span> <span class="hljs-number">1</span> (<span class="hljs-name">length</span> tem)) (<span class="hljs-name">car</span> tem))      (<span class="hljs-name">else</span> (<span class="hljs-name">last-pair</span> (<span class="hljs-name">cdr</span> tem)))))&gt; (<span class="hljs-name">last-pair</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>))<span class="hljs-number">5</span>&gt; (<span class="hljs-name">last-pair</span> (<span class="hljs-name">list</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span>))<span class="hljs-number">0</span></code></pre></div><blockquote><h3 id="定义过程reverse-返回表中的参数表的反向表"><a href="#定义过程reverse-返回表中的参数表的反向表" class="headerlink" title="定义过程reverse 返回表中的参数表的反向表"></a>定义过程reverse 返回表中的参数表的反向表</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">reverse</span> list-tem)    (<span class="hljs-name">define</span> (<span class="hljs-name">tem</span> old new)      (<span class="hljs-name">if</span> (<span class="hljs-name">null</span>? old)          new          (<span class="hljs-name">tem</span> (<span class="hljs-name">cdr</span> old) (<span class="hljs-name">cons</span> (<span class="hljs-name">car</span> old) new))))      (<span class="hljs-name">tem</span> list-tem (<span class="hljs-name">list</span>)))&gt; (<span class="hljs-name">reverse</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))(<span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>)</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda与let</title>
    <link href="/2020/07/19/Lisp/lambda%E4%B8%8Elet/"/>
    <url>/2020/07/19/Lisp/lambda%E4%B8%8Elet/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><blockquote><p>例：</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; ((<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>) (<span class="hljs-name">-</span> x <span class="hljs-number">1</span>)) <span class="hljs-number">3</span>)<span class="hljs-number">2</span></code></pre></div><blockquote><p>创建局部变量<br>例：</p></blockquote><div class="hljs"><pre><code class="hljs kotlin">&gt; (define (<span class="hljs-function"><span class="hljs-keyword">fun</span> x)</span>    ((lambda (a) (+ x a)) (+ x <span class="hljs-number">1</span>)))&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 1)</span><span class="hljs-number">3</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2)</span><span class="hljs-number">5</span></code></pre></div><blockquote><h3 id="也可以用let简化"><a href="#也可以用let简化" class="headerlink" title="也可以用let简化"></a>也可以用let简化</h3></blockquote><div class="hljs"><pre><code class="hljs kotlin">&gt; (define (<span class="hljs-function"><span class="hljs-keyword">fun</span> x)</span>    (let ((a (+ x <span class="hljs-number">1</span>))          )      (+ x a)))&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 1)</span><span class="hljs-number">3</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2)</span><span class="hljs-number">5</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 3)</span><span class="hljs-number">7</span></code></pre></div><blockquote><p>let语法：</p></blockquote><div class="hljs"><pre><code class="hljs angelscript">（let （        （变量名<span class="hljs-number">1</span> 怎么来的）        （变量名<span class="hljs-number">2</span> 怎么来的）        ）    （body））</code></pre></div><blockquote><h3 id="lambda与let"><a href="#lambda与let" class="headerlink" title="lambda与let"></a>lambda与let</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">((<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>)     (<span class="hljs-name">body</span>))x怎么来的)------------------------------------(<span class="hljs-name">let</span> ((<span class="hljs-name">x</span> x怎么来的))    (<span class="hljs-name">body</span>))</code></pre></div><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">let</span> ((<span class="hljs-name">x</span> <span class="hljs-number">1</span>)        (<span class="hljs-name">y</span> <span class="hljs-number">2</span>))    (<span class="hljs-name">+</span> x y))<span class="hljs-number">3</span></code></pre></div><div class="hljs"><pre><code class="hljs lisp">&gt; ((<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span> y)     (<span class="hljs-name">+</span> x y))   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>)<span class="hljs-number">3</span></code></pre></div><blockquote><p>这样的话scheme就可以不用增加新的机制来支持let</p></blockquote><blockquote><p>let 与 lambda都有局部变量的意思，<br>let与lambda体，里面的x 都是 外面x加一后的x<br>而外层的x就是（fun x） 传来的x<br>两个x不是一个东西</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fun</span> x)    (<span class="hljs-name">+</span> ((<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>)          (<span class="hljs-name">+</span> x <span class="hljs-number">1</span>)) (<span class="hljs-name">+</span> x <span class="hljs-number">1</span>))        x))&gt; (<span class="hljs-name">fun</span> <span class="hljs-number">1</span>)<span class="hljs-number">4</span>&gt; (<span class="hljs-name">fun</span> <span class="hljs-number">2</span>)<span class="hljs-number">6</span>&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fun</span> x)     (<span class="hljs-name">+</span> (<span class="hljs-name">let</span> ((<span class="hljs-name">x</span> (<span class="hljs-name">+</span> x <span class="hljs-number">1</span>)))         (<span class="hljs-name">+</span> x <span class="hljs-number">1</span>))       x))&gt; (<span class="hljs-name">fun</span> <span class="hljs-number">1</span>)<span class="hljs-number">4</span>&gt; (<span class="hljs-name">fun</span> <span class="hljs-number">2</span>)<span class="hljs-number">6</span></code></pre></div><blockquote><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><p>找函数y= 2x+5 的零点</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">f</span> fun x1 x2)      (<span class="hljs-name">let</span> ((<span class="hljs-name">a</span> (<span class="hljs-name">fun</span> x1))            (<span class="hljs-name">b</span> (<span class="hljs-name">fun</span> x2))            (<span class="hljs-name">x</span> (<span class="hljs-name">/</span> (<span class="hljs-name">+</span> x1 x2) <span class="hljs-number">2.0</span>)))        (<span class="hljs-name">if</span> (<span class="hljs-name">&lt;</span> (<span class="hljs-name">-</span> x2 x1) <span class="hljs-number">0.000000000001</span>)           x          (<span class="hljs-name">let</span> ((<span class="hljs-name">c</span> (<span class="hljs-name">fun</span> x)))           (<span class="hljs-name">if</span> (<span class="hljs-name">&lt;</span> (<span class="hljs-name">*</span> a c) <span class="hljs-number">0</span>)                (<span class="hljs-name">f</span> fun x1 x)              (<span class="hljs-name">f</span> fun x x2))))))&gt; (<span class="hljs-name">f</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>) (<span class="hljs-name">+</span> x <span class="hljs-number">2</span>)) <span class="hljs-number">-40</span> <span class="hljs-number">40</span>)<span class="hljs-number">-2.0000000000001705</span>&gt; (<span class="hljs-name">f</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>) (<span class="hljs-name">-</span> (<span class="hljs-name">*</span> x x) <span class="hljs-number">2</span>)) <span class="hljs-number">-40</span> <span class="hljs-number">40</span>)<span class="hljs-number">-1.4142135623731633</span>&gt; (<span class="hljs-name">f</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>) (<span class="hljs-name">-</span> (<span class="hljs-name">*</span> <span class="hljs-number">2</span> x) <span class="hljs-number">9</span>)) <span class="hljs-number">-40</span> <span class="hljs-number">40</span>)<span class="hljs-number">4.5000000000001705</span></code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换零钱的方式</title>
    <link href="/2020/07/19/Lisp/%E7%BB%83%E4%B9%A0_%E6%8D%A2%E9%9B%B6%E9%92%B1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/07/19/Lisp/%E7%BB%83%E4%B9%A0_%E6%8D%A2%E9%9B%B6%E9%92%B1%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><blockquote><hr></blockquote><h2 id="换零钱方式统计"><a href="#换零钱方式统计" class="headerlink" title="换零钱方式统计"></a>换零钱方式统计</h2><blockquote><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><h4 id="将1美元换成-半美元，四分之一美元，十美分，五美分，一美分"><a href="#将1美元换成-半美元，四分之一美元，十美分，五美分，一美分" class="headerlink" title="将1美元换成 半美元，四分之一美元，十美分，五美分，一美分"></a>将1美元换成 半美元，四分之一美元，十美分，五美分，一美分</h4></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">cc</span> amount kinds-of-coins)        (<span class="hljs-name">cond</span> ((<span class="hljs-name">=</span> amount <span class="hljs-number">0</span>) <span class="hljs-number">1</span>)          ((<span class="hljs-name">or</span> (<span class="hljs-name">&lt;</span> amount <span class="hljs-number">0</span>) (<span class="hljs-name">=</span> kinds-of-coins <span class="hljs-number">0</span>)) <span class="hljs-number">0</span>)          (<span class="hljs-name">else</span> (<span class="hljs-name">+</span> (<span class="hljs-name">cc</span> amount                        (<span class="hljs-name">-</span> kinds-of-coins <span class="hljs-number">1</span>))                   (<span class="hljs-name">cc</span> (<span class="hljs-name">-</span> amount                           (<span class="hljs-name">first-denomination</span> kinds-of-coins))                       kinds-of-coins)))))    &gt; (<span class="hljs-name">define</span> (<span class="hljs-name">first-denomination</span> kinds-of-coins)      (<span class="hljs-name">cond</span> ((<span class="hljs-name">=</span> kinds-of-coins <span class="hljs-number">1</span>) <span class="hljs-number">1</span>)        ((<span class="hljs-name">=</span> kinds-of-coins <span class="hljs-number">2</span>) <span class="hljs-number">5</span>)        ((<span class="hljs-name">=</span> kinds-of-coins <span class="hljs-number">3</span>) <span class="hljs-number">10</span>)        ((<span class="hljs-name">=</span> kinds-of-coins <span class="hljs-number">4</span>) <span class="hljs-number">25</span>)        ((<span class="hljs-name">=</span> kinds-of-coins <span class="hljs-number">5</span>) <span class="hljs-number">50</span>)))                                         &gt; (<span class="hljs-name">define</span> (<span class="hljs-name">count-change</span> amount)      (<span class="hljs-name">cc</span> amount <span class="hljs-number">5</span>))            &gt; (<span class="hljs-name">count-change</span> <span class="hljs-number">100</span>)<span class="hljs-number">292</span></code></pre></div><blockquote><hr></blockquote><h2 id="函数f由-n-lt-3-f-n-n-f-gt-3：f-n-f-n-1-2f-n-2-3f-n-3"><a href="#函数f由-n-lt-3-f-n-n-f-gt-3：f-n-f-n-1-2f-n-2-3f-n-3" class="headerlink" title="函数f由 n&lt;3 : f(n) = n; f &gt;= 3：f(n)=f(n-1) + 2f(n-2) + 3f(n-3)"></a>函数f由 n&lt;3 : f(n) = n; f &gt;= 3：f(n)=f(n-1) + 2f(n-2) + 3f(n-3)</h2><blockquote><h4 id="递归版："><a href="#递归版：" class="headerlink" title="递归版："></a>递归版：</h4></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">f</span> n)          (<span class="hljs-name">cond</span> ((<span class="hljs-name">&lt;</span> n <span class="hljs-number">3</span>) n)              (<span class="hljs-name">else</span> (<span class="hljs-name">+</span> (<span class="hljs-name">f</span> (<span class="hljs-name">-</span> n <span class="hljs-number">1</span>))                       (<span class="hljs-name">*</span> <span class="hljs-number">2</span> (<span class="hljs-name">f</span> (<span class="hljs-name">-</span> n <span class="hljs-number">2</span>)))                      (<span class="hljs-name">*</span> <span class="hljs-number">3</span> (<span class="hljs-name">f</span> (<span class="hljs-name">-</span> n <span class="hljs-number">3</span>)))))))&gt; (<span class="hljs-name">f</span> <span class="hljs-number">3</span>)<span class="hljs-number">4</span>&gt; (<span class="hljs-name">f</span> <span class="hljs-number">4</span>)<span class="hljs-number">11</span>&gt; (<span class="hljs-name">f</span> <span class="hljs-number">5</span>)<span class="hljs-number">25</span>&gt; (<span class="hljs-name">f</span> <span class="hljs-number">1</span>)<span class="hljs-number">1</span>&gt; (<span class="hljs-name">f</span> <span class="hljs-number">2</span>)<span class="hljs-number">2</span>&gt; (<span class="hljs-name">f</span> <span class="hljs-number">8</span>)<span class="hljs-number">335</span></code></pre></div><blockquote><h4 id="迭代版："><a href="#迭代版：" class="headerlink" title="迭代版："></a>迭代版：</h4></blockquote><div class="hljs"><pre><code class="hljs kotlin">&gt; (define (<span class="hljs-function"><span class="hljs-keyword">fun</span> f s l a n)</span>      (cond        ((= a n) f)       (<span class="hljs-keyword">else</span> (<span class="hljs-function"><span class="hljs-keyword">fun</span> s <span class="hljs-title">l</span> <span class="hljs-params">(+ l (* <span class="hljs-number">2</span> s)</span></span> (* <span class="hljs-number">3</span> f)) (+ a <span class="hljs-number">1</span>) n))))&gt; (define (f n)    (<span class="hljs-function"><span class="hljs-keyword">fun</span> 0 1 2 0 n))  </span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 1)</span><span class="hljs-number">1</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2)</span><span class="hljs-number">2</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 3)</span><span class="hljs-number">4</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 4)</span><span class="hljs-number">11</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 5)</span><span class="hljs-number">25</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 8)</span><span class="hljs-number">335</span></code></pre></div><blockquote><p>升级版</p></blockquote><div class="hljs"><pre><code class="hljs kotlin">&gt; (define (<span class="hljs-function"><span class="hljs-keyword">fun</span> f s l n)</span>        (cond          ((= n <span class="hljs-number">0</span>) f)         (<span class="hljs-keyword">else</span> (<span class="hljs-function"><span class="hljs-keyword">fun</span> s <span class="hljs-title">l</span> <span class="hljs-params">(+ l (* <span class="hljs-number">2</span> s)</span></span> (* <span class="hljs-number">3</span> f)) (- n <span class="hljs-number">1</span>)))))&gt; (define (f n)    (<span class="hljs-function"><span class="hljs-keyword">fun</span> 0 1 2 n))</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 8)</span><span class="hljs-number">335</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 5)</span><span class="hljs-number">25</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 4)</span><span class="hljs-number">11</span></code></pre></div><blockquote><p>有漏洞:<br>不能为负数</p></blockquote><div class="hljs"><pre><code class="hljs kotlin">&gt; (define (<span class="hljs-function"><span class="hljs-keyword">fun</span> f s l n)</span>        (cond            ((&lt; n <span class="hljs-number">0</span>) n)          ((= n <span class="hljs-number">0</span>) f)         (<span class="hljs-keyword">else</span> (<span class="hljs-function"><span class="hljs-keyword">fun</span> s <span class="hljs-title">l</span> <span class="hljs-params">(+ l (* <span class="hljs-number">2</span> s)</span></span> (* <span class="hljs-number">3</span> f)) (- n <span class="hljs-number">1</span>)))))&gt; (define (f n)    (<span class="hljs-function"><span class="hljs-keyword">fun</span> 0 1 2 n))</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 8)</span><span class="hljs-number">335</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 5)</span><span class="hljs-number">25</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 4)</span><span class="hljs-number">11</span></code></pre></div><blockquote><h3 id="这个例子说明了迭代比递归效率高-，计算迭代（fun-100000）的时间和计算递归（f-35）的差不多"><a href="#这个例子说明了迭代比递归效率高-，计算迭代（fun-100000）的时间和计算递归（f-35）的差不多" class="headerlink" title="这个例子说明了迭代比递归效率高  ，计算迭代（fun 100000）的时间和计算递归（f 35）的差不多"></a>这个例子说明了迭代比递归效率高 ，计算迭代（fun 100000）的时间和计算递归（f 35）的差不多</h3></blockquote><blockquote><hr></blockquote><h2 id="求幕-运算"><a href="#求幕-运算" class="headerlink" title="求幕 运算"></a>求幕 运算</h2><blockquote><h3 id="递归版：-1"><a href="#递归版：-1" class="headerlink" title="递归版："></a>递归版：</h3></blockquote><div class="hljs"><pre><code class="hljs kotlin">&gt; (define (<span class="hljs-function"><span class="hljs-keyword">fun</span> b n)</span>    (<span class="hljs-keyword">if</span> (= n <span class="hljs-number">0</span>)         <span class="hljs-number">1</span>        (* b (<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">b</span> <span class="hljs-params">(- n <span class="hljs-number">1</span>)</span></span>))))&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2 3)</span><span class="hljs-number">8</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2 4)</span><span class="hljs-number">16</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2 5)</span><span class="hljs-number">32</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 5 5)</span><span class="hljs-number">3125</span>&gt; (<span class="hljs-function"><span class="hljs-keyword">fun</span> 2 10)</span><span class="hljs-number">1024</span></code></pre></div><blockquote><h3 id="迭代版：-1"><a href="#迭代版：-1" class="headerlink" title="迭代版："></a>迭代版：</h3></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">f</span> b r n)      (<span class="hljs-name">if</span> (<span class="hljs-name">=</span> n <span class="hljs-number">0</span>)          r          (<span class="hljs-name">f</span> b (<span class="hljs-name">*</span> r b) (<span class="hljs-name">-</span> n <span class="hljs-number">1</span>))))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">fun1</span> b n)    (<span class="hljs-name">f</span> b <span class="hljs-number">1</span> n))    &gt; (<span class="hljs-name">fun1</span> <span class="hljs-number">2</span> <span class="hljs-number">10</span>)<span class="hljs-number">1024</span>&gt; (<span class="hljs-name">fun1</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span>)<span class="hljs-number">32</span></code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本数据类型</title>
    <link href="/2020/07/19/Java/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/07/19/Java/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><blockquote><h2 id="在java中有8个基本数据类型"><a href="#在java中有8个基本数据类型" class="headerlink" title="在java中有8个基本数据类型"></a>在java中有8个基本数据类型</h2></blockquote><table><thead><tr><th>基本数据类型</th><th>大小</th><th>他们的包装类</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32 bits</td><td>Integer</td><td>0</td></tr><tr><td>short</td><td>16 bits</td><td>Short</td><td>0</td></tr><tr><td>long</td><td>64 bits</td><td>Long</td><td>0</td></tr><tr><td>float</td><td>32 bits</td><td>Float</td><td>0.0f</td></tr><tr><td>double</td><td>64 bits</td><td>Double</td><td>0.0d</td></tr><tr><td>char</td><td>16 bits</td><td>Character</td><td>\u0000(null)</td></tr><tr><td>byte</td><td>8 bits</td><td>Byte</td><td>0</td></tr><tr><td>boolean</td><td>1 bits</td><td>Boolean</td><td>false</td></tr></tbody></table><blockquote><h2 id="然而"><a href="#然而" class="headerlink" title="然而"></a><strong>然而</strong></h2><p>在jvm中这些基本数据类型不是以上面的大小保存的，<br>jvm中以32 bits为一个储层空间，<br>当小于32 bits时 还是用32 bits空间保存，<br>然而大于32 bits时 就会用两个空间保存 （如long ， double）。</p></blockquote><h2 id="基本数据的分配空间"><a href="#基本数据的分配空间" class="headerlink" title="基本数据的分配空间"></a>基本数据的分配空间</h2><blockquote><ul><li>基本数据有固定的大小可能会被分配在栈中（在方法中定义的局部变量）</li><li>通过new出来的是在堆中，不过可能会在栈中有其引用（在函数中new出来的对象时）</li></ul></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote><p>在使用的时候可以把基本数据类型赋值给他们自己的包装类。也可以反过来赋值。</p></blockquote><h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><div class="hljs"><pre><code class="hljs routeros">Integer <span class="hljs-attribute">a</span>=1；</code></pre></div><h3 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h3><div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> a=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">1</span>);</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序对应用</title>
    <link href="/2020/07/19/Lisp/%E5%BA%8F%E5%AF%B9%E5%BA%94%E7%94%A8/"/>
    <url>/2020/07/19/Lisp/%E5%BA%8F%E5%AF%B9%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h2 id="cons-car-cdr-的一个小实现"><a href="#cons-car-cdr-的一个小实现" class="headerlink" title="cons car cdr 的一个小实现"></a>cons car cdr 的一个小实现</h2><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">car</span> x)    (<span class="hljs-name">x</span> <span class="hljs-number">0</span>))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">cdr</span> x)    (<span class="hljs-name">x</span> <span class="hljs-number">1</span>))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">cons</span> x y)    (<span class="hljs-name">define</span> (<span class="hljs-name">tem</span> z)      (<span class="hljs-name">cond</span> ((<span class="hljs-name">=</span> <span class="hljs-number">0</span> z) x)        ((<span class="hljs-name">=</span> <span class="hljs-number">1</span> z) y)))    tem     )&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">1</span>&gt; (<span class="hljs-name">cdr</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">2</span></code></pre></div><blockquote><p>没有使用新的语法就实现了用cons car cdr 表示的序对。</p></blockquote><h2 id="而"><a href="#而" class="headerlink" title="而"></a>而</h2><div class="hljs"><pre><code class="hljs angelscript">(car (cons <span class="hljs-number">1</span> <span class="hljs-number">2</span>)) 返回 <span class="hljs-number">1</span></code></pre></div><blockquote><p>可以用其他方法实现</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">cons</span> x y)    (<span class="hljs-name">lambda</span> (<span class="hljs-name">z</span>) (<span class="hljs-name">z</span> x y)))    &gt; (<span class="hljs-name">define</span> (<span class="hljs-name">car</span> z)    (<span class="hljs-name">z</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">p</span> q) p)))&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">1</span></code></pre></div><h1 id="序对的一种应用"><a href="#序对的一种应用" class="headerlink" title="序对的一种应用"></a>序对的一种应用</h1><blockquote><p>例：<br>用car cdr cons 表示2a + 3b<br>用非负数表示</p></blockquote><div class="hljs"><pre><code class="hljs lisp">&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">cons</span> a b)    (<span class="hljs-name">lambda</span> (<span class="hljs-name">z</span>) (<span class="hljs-name">z</span>  a  b)))&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">car</span> z)    (<span class="hljs-name">z</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">p</span> q) (<span class="hljs-name">*</span> p <span class="hljs-number">2</span>))))&gt; (<span class="hljs-name">car</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">2</span>&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">cdr</span> z)    (<span class="hljs-name">z</span> (<span class="hljs-name">lambda</span> (<span class="hljs-name">p</span> q) (<span class="hljs-name">*</span> q <span class="hljs-number">3</span>))))&gt; (<span class="hljs-name">cdr</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">6</span>&gt; (<span class="hljs-name">define</span> (<span class="hljs-name">add</span> x)    (<span class="hljs-name">+</span> (<span class="hljs-name">car</span> x) (<span class="hljs-name">cdr</span> x)))&gt; (<span class="hljs-name">add</span> (<span class="hljs-name">cons</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<span class="hljs-number">8</span>&gt; (<span class="hljs-name">add</span> (<span class="hljs-name">cons</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>))<span class="hljs-number">13</span></code></pre></div><blockquote><h3 id="scheme-利用过程来性表达一些数据的复合能力"><a href="#scheme-利用过程来性表达一些数据的复合能力" class="headerlink" title="scheme 利用过程来性表达一些数据的复合能力"></a>scheme 利用过程来性表达一些数据的复合能力</h3><p>这种有关的程序设计风格通常称为 消息传递。</p></blockquote><blockquote><h2 id="然而也体现了scheme的数据与程序的模糊性"><a href="#然而也体现了scheme的数据与程序的模糊性" class="headerlink" title="然而也体现了scheme的数据与程序的模糊性"></a>然而也体现了scheme的数据与程序的模糊性</h2></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Lisp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scheme练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pod简单操作</title>
    <link href="/2020/07/19/kubernetes/Pod/"/>
    <url>/2020/07/19/kubernetes/Pod/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="一-Pod基本操作"><a href="#一-Pod基本操作" class="headerlink" title="一 Pod基本操作"></a>一 Pod基本操作</h1><h3 id="1-使用kubectl-create来创建pod"><a href="#1-使用kubectl-create来创建pod" class="headerlink" title="1.使用kubectl create来创建pod"></a>1.使用kubectl create来创建pod</h3><div class="hljs"><pre><code><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">create</span> -f yaml-<span class="hljs-type">name</span>.yaml</code></pre></div></code></pre><h3 id="2-获取运行中的pod的完整定义"><a href="#2-获取运行中的pod的完整定义" class="headerlink" title="2.获取运行中的pod的完整定义"></a>2.获取运行中的pod的完整定义</h3><div class="hljs"><pre><code>获取yaml格式的pod完整定义<pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> po pod-<span class="hljs-built_in">name</span> -o yaml</code></pre></div>- po 是pod的缩写</code></pre><p>获取json格式的pod完整定义</p><div class="hljs"><pre><code><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> po pod-<span class="hljs-type">name</span> -o <span class="hljs-type">json</span></code></pre></div></code></pre><h3 id="3-获取所有pod"><a href="#3-获取所有pod" class="headerlink" title="3.获取所有pod"></a>3.获取所有pod</h3><div class="hljs"><pre><code>获取默认命名空间所有pod    <pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> pods</code></pre></div></code></pre><p>获取指定空间的所有pod</p><div class="hljs"><pre><code><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">get</span> po --<span class="hljs-keyword">namespace</span> <span class="hljs-keyword">namespace</span></code></pre></div></code></pre><h3 id="4-获取应用程序的日志"><a href="#4-获取应用程序的日志" class="headerlink" title="4.获取应用程序的日志"></a>4.获取应用程序的日志</h3><p>使用kubectl logs 命令获取pod日志</p><div class="hljs"><pre><code><pre><code class="hljs applescript">kubectl logs container-<span class="hljs-built_in">id</span></code></pre></div></code></pre><p>-c 获取pod中指定容器的日志</p><div class="hljs"><pre><code><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl logs kubia-manual -c kubia</span></code></pre></div>   在kubia-manual Pod中的kubia容器</code></pre><h3 id="5-向Pod发送请求"><a href="#5-向Pod发送请求" class="headerlink" title="5. 向Pod发送请求"></a>5. 向Pod发送请求</h3><p>在不通过svc的情况下与pod通信</p><div class="hljs"><pre><code>使用port-forward     <pre><code class="hljs angelscript">kubectl port-forward kubia-manual <span class="hljs-number">8888</span>:<span class="hljs-number">8080</span></code></pre></div>     <div class="hljs"><pre><code class="hljs angelscript">cuel localhost:<span class="hljs-number">8888</span></code></pre></div></code></pre><h3 id="6-删除Pod"><a href="#6-删除Pod" class="headerlink" title="6. 删除Pod"></a>6. 删除Pod</h3><div class="hljs"><pre><code><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">delete</span> pod pod-<span class="hljs-type">name</span></code></pre></div></code></pre><hr><h1 id="二-Pod标签"><a href="#二-Pod标签" class="headerlink" title="二  Pod标签"></a>二 Pod标签</h1><h3 id="1-一个简单的yaml"><a href="#1-一个简单的yaml" class="headerlink" title="1. 一个简单的yaml"></a>1. 一个简单的yaml</h3><div class="hljs"><pre><code><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubia-manual</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">creation-method:</span> <span class="hljs-string">manual</span>    <span class="hljs-attr">env:</span> <span class="hljs-string">prod</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">containers:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">luksa/kubia</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubia</span>    <span class="hljs-attr">ports:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8081</span>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span></code></pre></div>    具有2个标签        <div class="hljs"><pre><code class="hljs oxygene">creation-<span class="hljs-function"><span class="hljs-keyword">method</span>:</span> manual</code></pre></div>        <div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">en</span><span class="hljs-variable">v:</span> prod</code></pre></div></code></pre><h3 id="2-获取pod上的所有标签"><a href="#2-获取pod上的所有标签" class="headerlink" title="2. 获取pod上的所有标签"></a>2. 获取pod上的所有标签</h3><div class="hljs"><pre><code><pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> po pod-<span class="hljs-built_in">name</span> <span class="hljs-comment">--show-labels</span></code></pre></div></code></pre><h3 id="3-获取含有label的所有pod"><a href="#3-获取含有label的所有pod" class="headerlink" title="3. 获取含有label的所有pod"></a>3. 获取含有label的所有pod</h3><div class="hljs"><pre><code><pre><code class="hljs delphi">kubectl get po -L <span class="hljs-keyword">label</span>-<span class="hljs-keyword">name</span>,<span class="hljs-keyword">label</span>-<span class="hljs-keyword">name</span>.....</code></pre></div></code></pre><h3 id="4-修改pod上的label"><a href="#4-修改pod上的label" class="headerlink" title="4. 修改pod上的label"></a>4. 修改pod上的label</h3><div class="hljs"><pre><code><pre><code class="hljs applescript">kubectl label po pod-<span class="hljs-built_in">name</span> env=v1 <span class="hljs-comment">--overwrite</span></code></pre></div>-   修改现有的label值需要   - -overwrite</code></pre><p>​</p><h3 id="5-添加label"><a href="#5-添加label" class="headerlink" title="5. 添加label"></a>5. 添加label</h3><div class="hljs"><pre><code> <pre><code class="hljs delphi">k <span class="hljs-keyword">label</span> pod pod-<span class="hljs-keyword">name</span> <span class="hljs-keyword">name</span>=ku</code></pre></div>-   注意 原来pod不能含有这个标签</code></pre><p>​</p><h3 id="6-获取指定label的pod"><a href="#6-获取指定label的pod" class="headerlink" title="6. 获取指定label的pod"></a>6. 获取指定label的pod</h3><div class="hljs"><pre><code><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">get</span> po -l <span class="hljs-built_in">label</span>=<span class="hljs-built_in">label</span>-<span class="hljs-built_in">content</span></code></pre></div></code></pre><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernets基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本依赖</title>
    <link href="/2020/07/19/mybatis/1%E5%9F%BA%E6%9C%AC/"/>
    <url>/2020/07/19/mybatis/1%E5%9F%BA%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/getting-started.html</a></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li><p>pom.xml 加入 依赖</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div></li><li><p>配置mybatis</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"091834123"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"com/example/mybatis/t1Mapper.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div></li></ul><h1 id="实现一个工具类"><a href="#实现一个工具类" class="headerlink" title="实现一个工具类"></a>实现一个工具类</h1><ul><li><p>主要保存官方给的3行代码</p><div class="hljs"><pre><code class="hljs java">String resource = <span class="hljs-string">"org/mybatis/example/mybatis-config.xml"</span>;InputStream inputStream = Resources.getResourceAsStream(resource);SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</code></pre></div></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>导包</li><li>mybatis配置</li><li>后面的mapper配置文件一定要在mybatis配置文件中<mappers></mappers></li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本用法</title>
    <link href="/2020/07/19/mybatis/2%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/"/>
    <url>/2020/07/19/mybatis/2%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li><p>在数据库中有一个表</p><div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(    <span class="hljs-keyword">id</span>       <span class="hljs-built_in">int</span>(<span class="hljs-number">16</span>)     <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,    <span class="hljs-keyword">name</span>     <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,    <span class="hljs-keyword">password</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">32</span>)    <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,    <span class="hljs-keyword">constraint</span> <span class="hljs-keyword">id</span>        <span class="hljs-keyword">unique</span> (<span class="hljs-keyword">id</span>));<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t1    <span class="hljs-keyword">add</span> primary <span class="hljs-keyword">key</span> (<span class="hljs-keyword">id</span>);</code></pre></div></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-创建出与数据库数据对应的类"><a href="#1-创建出与数据库数据对应的类" class="headerlink" title="1. 创建出与数据库数据对应的类"></a>1. 创建出与数据库数据对应的类</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatis;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">t1Item</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">t1Item</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String password)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.password = password;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">t1Item</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"t1Item&#123;"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", password='"</span> + password + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'&#125;'</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> password;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;        <span class="hljs-keyword">this</span>.password = password;    &#125;&#125;</code></pre></div><h4 id="2-创建一个Mapper接口"><a href="#2-创建一个Mapper接口" class="headerlink" title="2.创建一个Mapper接口"></a>2.创建一个Mapper接口</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">t1Mapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;t1Item&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div><h4 id="3-创建Mapper接口对应的xml文件"><a href="#3-创建Mapper接口对应的xml文件" class="headerlink" title="3.  创建Mapper接口对应的xml文件"></a>3. 创建Mapper接口对应的xml文件</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.example.mybatis.t1Mapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.example.mybatis.t1Item"</span>&gt;</span>        select * from t1 ;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;SqlSessionFactory sessionFactory = SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession session = sessionFactory.openSession()) &#123;t1Mapper mapper = session.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;mapper.getAll().forEach(System.out::println);&#125;&#125;</code></pre></div><h4 id="5-结果"><a href="#5-结果" class="headerlink" title="5. 结果"></a>5. 结果</h4><div class="hljs"><pre><code class="hljs java">t1Item&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">'a1'</span>, password=<span class="hljs-string">'1234'</span>&#125;t1Item&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">'a2'</span>, password=<span class="hljs-string">'123445'</span>&#125;</code></pre></div><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传递简单参数</title>
    <link href="/2020/07/19/mybatis/3%E4%BC%A0%E9%80%92%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0/"/>
    <url>/2020/07/19/mybatis/3%E4%BC%A0%E9%80%92%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-在接口中增加一个方法"><a href="#1-在接口中增加一个方法" class="headerlink" title="1. 在接口中增加一个方法"></a>1. 在接口中增加一个方法</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;t1Item&gt; <span class="hljs-title">getT1ById</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;</code></pre></div><h4 id="2-在mapper配置文件中编写对应的标签"><a href="#2-在mapper配置文件中编写对应的标签" class="headerlink" title="2. 在mapper配置文件中编写对应的标签"></a>2. 在mapper配置文件中编写对应的标签</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getT1ById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.example.mybatis.t1Item"</span>&gt;</span>     select * from t1 where id=#&#123;id&#125; limit 1; <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></div><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;SqlSessionFactory sessionFactory = SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession session = sessionFactory.openSession()) &#123;t1Mapper mapper = session.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;mapper.getT1ById(<span class="hljs-number">1</span>).forEach(System.out::println);&#125;&#125;</code></pre></div><h4 id="4-结果"><a href="#4-结果" class="headerlink" title="4. 结果"></a>4. 结果</h4><div class="hljs"><pre><code class="hljs java">t1Item&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">'a1'</span>, password=<span class="hljs-string">'1234'</span>&#125;</code></pre></div><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>方法中的参数在xml中用#{}取出</li><li>方法中可以用注解 @Param(“name”) 改变名字</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传递Map类型参数</title>
    <link href="/2020/07/19/mybatis/4%E4%BC%A0%E9%80%92Map%E5%8F%82%E6%95%B0/"/>
    <url>/2020/07/19/mybatis/4%E4%BC%A0%E9%80%92Map%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-在接口中增加一个方法"><a href="#1-在接口中增加一个方法" class="headerlink" title="1. 在接口中增加一个方法"></a>1. 在接口中增加一个方法</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;t1Item&gt; <span class="hljs-title">getT1ByMap</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;</code></pre></div><h4 id="2-在mapper配置文件中编写对应的标签"><a href="#2-在mapper配置文件中编写对应的标签" class="headerlink" title="2. 在mapper配置文件中编写对应的标签"></a>2. 在mapper配置文件中编写对应的标签</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getT1ByMap"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.example.mybatis.t1Item"</span>&gt;</span>        select * from t1        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"id!=null"</span>&gt;</span>                id = #&#123;id&#125;            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"name!=null"</span>&gt;</span>                and name like concat('%',#&#123;name&#125;,'%')            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></div><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, SQLException </span>&#123;SqlSessionFactory sessionFactory = SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession session = sessionFactory.openSession()) &#123;t1Mapper mapper = session.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;HashMap&lt;String,Object&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();map.put(<span class="hljs-string">"name"</span>,<span class="hljs-string">"8"</span>);List&lt;t1Item&gt; t1ByMap = mapper.getT1ByMap(map);t1ByMap.forEach(System.out::println);&#125;&#125;</code></pre></div><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li><p>使用map里的数据时需要检查数据是否存在</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"id!=null"</span>&gt;</span>     id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></code></pre></div></li><li><p>使用 like 进行模糊化匹配时，推荐使用name like concat(‘%’,#{name},’%’) ，这样可以避免sql注入</p></li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传递自定义对象类型参数</title>
    <link href="/2020/07/19/mybatis/5%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0/"/>
    <url>/2020/07/19/mybatis/5%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-在接口中增加一个方法"><a href="#1-在接口中增加一个方法" class="headerlink" title="1. 在接口中增加一个方法"></a>1. 在接口中增加一个方法</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addT1Item</span><span class="hljs-params">(t1Item item)</span></span>;</code></pre></div><h4 id="2-在mapper配置文件中编写对应的标签"><a href="#2-在mapper配置文件中编写对应的标签" class="headerlink" title="2. 在mapper配置文件中编写对应的标签"></a>2. 在mapper配置文件中编写对应的标签</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addT1Item"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.example.mybatis.t1Item"</span>&gt;</span>        insert into t1 (id, name, password) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre></div><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">conTextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;SqlSessionFactory sqlSessionFactory=SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession sqlSession=sqlSessionFactory.openSession())&#123;t1Mapper mapper = sqlSession.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-keyword">int</span> i = mapper.addT1Item(<span class="hljs-keyword">new</span> t1Item(<span class="hljs-number">100</span>, <span class="hljs-string">"t100"</span>, <span class="hljs-string">"a100"</span>));sqlSession.commit();System.out.println(i);&#125;&#125;</code></pre></div><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>使用对象作为参数时，在xml配置文件中使用里面的属性与直接使用map中的键值对一样的。#{name}</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传递复杂对象</title>
    <link href="/2020/07/19/mybatis/6%E4%BC%A0%E9%80%92%E5%A4%8D%E6%9D%82%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/07/19/mybatis/6%E4%BC%A0%E9%80%92%E5%A4%8D%E6%9D%82%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-构造出两张表"><a href="#1-构造出两张表" class="headerlink" title="1. 构造出两张表"></a>1. 构造出两张表</h4><div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> proper(    <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">8</span>) primary <span class="hljs-keyword">key</span> ,    <span class="hljs-keyword">name</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,    meg <span class="hljs-built_in">char</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>);<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> home (    <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">8</span>) primary <span class="hljs-keyword">key</span> ,    <span class="hljs-keyword">name</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,    <span class="hljs-keyword">master</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,    <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (<span class="hljs-keyword">master</span>) <span class="hljs-keyword">references</span> proper(<span class="hljs-keyword">id</span>));</code></pre></div><h4 id="2-在接口中增加一个方法"><a href="#2-在接口中增加一个方法" class="headerlink" title="2.在接口中增加一个方法"></a>2.在接口中增加一个方法</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addHome</span><span class="hljs-params">(Home home)</span></span>;</code></pre></div><h4 id="3-在mapper配置文件中编写对应的标签"><a href="#3-在mapper配置文件中编写对应的标签" class="headerlink" title="3.在mapper配置文件中编写对应的标签"></a>3.在mapper配置文件中编写对应的标签</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addHome"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.example.mybatis.Home"</span>&gt;</span>      insert into home (id, name, master) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;proper.id&#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre></div><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">conTextLoadsHome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;SqlSessionFactory sqlSessionFactory=SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession sqlSession=sqlSessionFactory.openSession())&#123;t1Mapper mapper = sqlSession.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-keyword">int</span> i = mapper.addHome(<span class="hljs-keyword">new</span> Home(<span class="hljs-number">10</span>, <span class="hljs-string">"home10"</span>, <span class="hljs-keyword">new</span> Proper(<span class="hljs-number">1</span>, <span class="hljs-string">"a1"</span>, <span class="hljs-string">"10"</span>)));System.out.println(i);sqlSession.commit();&#125;&#125;</code></pre></div><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>在xml中使用对象中的对象的属性的时候，用对象.属性如：#{proper.id})</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接受复杂对象</title>
    <link href="/2020/07/19/mybatis/7%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/07/19/mybatis/7%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-在接口中加入方法"><a href="#1-在接口中加入方法" class="headerlink" title="1. 在接口中加入方法"></a>1. 在接口中加入方法</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Home <span class="hljs-title">getByHomeId</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;</code></pre></div><h4 id="2-在mapper配置文件中编写对应的标签"><a href="#2-在mapper配置文件中编写对应的标签" class="headerlink" title="2.在mapper配置文件中编写对应的标签"></a>2.在mapper配置文件中编写对应的标签</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"home"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.example.mybatis.Home"</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"h_id"</span>/&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"h_name"</span>/&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"proper"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"com.example.mybatis.Proper"</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"p_id"</span>/&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"p_name"</span>/&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"meg"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"p_meg"</span>/&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getByHomeId"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"home"</span>&gt;</span>     select h.id as h_id,            h.name as h_name,            p.name as p_name,            p.id as p_id,            p.meg as p_meg     from home as h join proper as p  on p.id = h.master     where h.id=#&#123;id&#125;; <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></div><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><div class="hljs"><pre><code class="hljs java">SqlSessionFactory sqlSessionFactory=SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession sqlSession=sqlSessionFactory.openSession())&#123;t1Mapper mapper = sqlSession.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;Home byHomeId = mapper.getByHomeId(<span class="hljs-number">1</span>);System.out.println(byHomeId.toString());&#125;</code></pre></div><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>对象中的对象映射用 association标签</li><li>注意resultMap中的javaType</li><li>注意select中的resultMap</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接受数组类型</title>
    <link href="/2020/07/19/mybatis/8%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E6%95%B0%E7%BB%84/"/>
    <url>/2020/07/19/mybatis/8%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:37 GMT+0800 (CST) --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h4 id="1-在接口中加入方法"><a href="#1-在接口中加入方法" class="headerlink" title="1. 在接口中加入方法"></a>1. 在接口中加入方法</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Proper <span class="hljs-title">getByProperId</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;</code></pre></div><h4 id="2-在mapper配置文件中编写对应的标签"><a href="#2-在mapper配置文件中编写对应的标签" class="headerlink" title="2.在mapper配置文件中编写对应的标签"></a>2.在mapper配置文件中编写对应的标签</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"proper"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.example.mybatis.Proper"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"p_id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"p_name"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"meg"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"p_meg"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"home"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"com.example.mybatis.Home"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"h_id"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"h_name"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getByProperId"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"proper"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"_int"</span>&gt;</span>        select h.id as h_id,               h.name as h_name,               p.name as p_name,               p.id as p_id,               p.meg as p_meg        from proper p join home h on p.id = h.master        where p.id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></div><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><div class="hljs"><pre><code class="hljs java">SqlSessionFactory sqlSessionFactory=SessionFactory.getSessionFactory();<span class="hljs-keyword">try</span> (SqlSession sqlSession=sqlSessionFactory.openSession())&#123;t1Mapper mapper = sqlSession.getMapper(t1Mapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;Proper byProperId = mapper.getByProperId(<span class="hljs-number">1</span>);System.out.println(byProperId.toString());&#125;</code></pre></div><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>对象中的list用collection标签</li><li>在collection中用ofType指定类型</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>class分析</title>
    <link href="/2020/07/19/ASM/class%E7%B1%BB%E5%88%86%E6%9E%90/"/>
    <url>/2020/07/19/ASM/class%E7%B1%BB%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<!-- build time:Fri Oct 23 2020 19:52:36 GMT+0800 (CST) --><h1 id="class类分析"><a href="#class类分析" class="headerlink" title="class类分析"></a>class类分析</h1><p><img src="class.png" srcset="/img/loading.gif" alt="img"></p><hr><ul><li><h2 id="class类的组成"><a href="#class类的组成" class="headerlink" title="class类的组成"></a>class类的组成</h2><ul><li>魔数（Magic）</li><li>版本号（Version）</li><li>常量池（constant_pool)</li><li>访问标志（access_flag)</li><li>当前类索引（this_class)</li><li>父类索引（super_class)</li><li>接口索引 （interfaces）</li><li>字段表（fields）</li><li>方法表（methods）</li><li>附加属性（attributes）</li></ul></li></ul><hr><ul><li><p>魔数（Magic）</p><div class="hljs"><pre><code><pre><code class="hljs angelscript">一个<span class="hljs-keyword">class</span>文件的魔数不会改变在开头    <span class="hljs-symbol">0xCAFEBABE</span><span class="hljs-symbol">jvm</span>是靠魔数判断是不是一个<span class="hljs-symbol">class</span>类</code></pre></div></code></pre></li><li><p>版本号（Version）</p><ul><li><p>副版本号（minor_version)</p></li><li><p>主版本号（major_version)</p><div class="hljs"><pre><code class="hljs coffeescript">版本号是jvm判断<span class="hljs-class"><span class="hljs-keyword">class</span>类能不能被正常执行</span><span class="hljs-class"><span class="hljs-keyword">class</span>类的版本号必须在<span class="hljs-title">jvm</span>所支持的版本号内才能正常执行</span></code></pre></div></li></ul></li><li><p>常量池（constant_pool）</p><ul><li><p>常量池计数器（constant_pool_count)</p></li><li><p>常量池（constant_pool[])</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">计数器是常量池的个数加一</span><span class="hljs-string">常量池</span><span class="hljs-string">例如：class数据</span>  <span class="hljs-number">00</span> <span class="hljs-number">13</span> <span class="hljs-string">0A</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">07</span>  <span class="hljs-string">.......4........</span><span class="hljs-number">00</span> <span class="hljs-number">11</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">61</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">49</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span>  <span class="hljs-string">........a...I...</span><span class="hljs-number">62</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-string">3C</span> <span class="hljs-number">69</span> <span class="hljs-string">6E</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-string">3E</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span> <span class="hljs-number">56</span>  <span class="hljs-string">b...&lt;init&gt;...()V</span><span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">43</span> <span class="hljs-string">6F</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-string">0F</span> <span class="hljs-string">4C</span> <span class="hljs-number">69</span> <span class="hljs-string">6E</span> <span class="hljs-number">65</span> <span class="hljs-string">4E</span> <span class="hljs-number">75</span>  <span class="hljs-string">...Code...LineNu</span><span class="hljs-string">6D</span> <span class="hljs-number">62</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> <span class="hljs-string">4C</span> <span class="hljs-string">6F</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span>  <span class="hljs-string">mberTable...Loca</span><span class="hljs-string">6C</span> <span class="hljs-number">56</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span>  <span class="hljs-string">lVariableTable..</span><span class="hljs-number">04</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-string">4C</span> <span class="hljs-number">63</span> <span class="hljs-string">6F</span> <span class="hljs-string">6D</span> <span class="hljs-string">2F</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span>  <span class="hljs-string">.this...Lcom/AAA</span><span class="hljs-string">3B</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-string">0A</span> <span class="hljs-number">53</span> <span class="hljs-string">6F</span> <span class="hljs-number">75</span> <span class="hljs-number">72</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">46</span> <span class="hljs-number">69</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span>  <span class="hljs-string">;...SourceFile..</span><span class="hljs-number">08</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-string">2E</span> <span class="hljs-string">6A</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-string">0C</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span>  <span class="hljs-string">.AAA.java.......</span><span class="hljs-number">07</span> <span class="hljs-number">63</span> <span class="hljs-string">6F</span> <span class="hljs-string">6D</span> <span class="hljs-string">2F</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">01</span>  <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-string">6A</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-string">2F</span>  <span class="hljs-string">.com/AAA...java/</span><span class="hljs-string">6C</span> <span class="hljs-number">61</span> <span class="hljs-string">6E</span> <span class="hljs-number">67</span> <span class="hljs-string">2F</span> <span class="hljs-string">4F</span> <span class="hljs-number">62</span> <span class="hljs-string">6A</span> <span class="hljs-number">65</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span><span class="hljs-number">00</span> <span class="hljs-number">13</span> <span class="hljs-string">代表19</span>   <span class="hljs-string">说明常量池有18个数据</span><span class="hljs-number">1</span><span class="hljs-string">：0A</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span>                         <span class="hljs-comment">#3.#16</span><span class="hljs-number">2</span><span class="hljs-string">：07</span> <span class="hljs-number">00</span> <span class="hljs-number">11</span>                               <span class="hljs-comment">#17</span><span class="hljs-number">3</span><span class="hljs-string">：07</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span>                               <span class="hljs-comment">#18</span><span class="hljs-number">4</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">61</span>                            <span class="hljs-string">a</span> <span class="hljs-number">5</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">49</span>                            <span class="hljs-string">I</span><span class="hljs-number">6</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">62</span>                            <span class="hljs-string">b</span><span class="hljs-number">7</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-string">3C</span> <span class="hljs-number">69</span> <span class="hljs-string">6E</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-string">3E</span>             <span class="hljs-string">&lt;init&gt;</span><span class="hljs-number">8</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span> <span class="hljs-number">56</span>    <span class="hljs-string">()V</span><span class="hljs-number">9</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">43</span> <span class="hljs-string">6F</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span>                   <span class="hljs-string">Code</span><span class="hljs-number">10</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-string">0F</span> <span class="hljs-string">4C</span> <span class="hljs-number">69</span> <span class="hljs-string">6E</span> <span class="hljs-number">65</span> <span class="hljs-string">4E</span> <span class="hljs-number">75</span> <span class="hljs-string">6D</span> <span class="hljs-number">62</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span>       <span class="hljs-string">LineNumberTable</span><span class="hljs-number">11</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> <span class="hljs-string">4C</span> <span class="hljs-string">6F</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span> <span class="hljs-string">6C</span> <span class="hljs-number">56</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span>  <span class="hljs-string">LocalVariableTable</span><span class="hljs-number">12</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> <span class="hljs-number">73</span>                  <span class="hljs-string">this</span> <span class="hljs-number">13</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-string">4C</span> <span class="hljs-number">63</span> <span class="hljs-string">6F</span> <span class="hljs-string">6D</span> <span class="hljs-string">2F</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-string">3B</span>    <span class="hljs-string">Lcom/AAA</span><span class="hljs-number">14</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-string">0A</span> <span class="hljs-number">53</span> <span class="hljs-string">6F</span> <span class="hljs-number">75</span> <span class="hljs-number">72</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">46</span> <span class="hljs-number">69</span> <span class="hljs-string">6C</span> <span class="hljs-number">65</span>   <span class="hljs-string">SourceFile</span><span class="hljs-number">15</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-string">2E</span> <span class="hljs-string">6A</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span>        <span class="hljs-string">AAA.java</span><span class="hljs-number">16</span><span class="hljs-string">：0C</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span>                          <span class="hljs-comment">#7:#8</span><span class="hljs-number">17</span><span class="hljs-string">：01</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">63</span> <span class="hljs-string">6F</span> <span class="hljs-string">6D</span> <span class="hljs-string">2F</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span>           <span class="hljs-string">com/AAA</span><span class="hljs-number">18</span><span class="hljs-string">：01</span>  <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-string">6A</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-string">2F</span> <span class="hljs-string">6C</span> <span class="hljs-number">61</span> <span class="hljs-string">6E</span> <span class="hljs-number">67</span> <span class="hljs-string">2F</span> <span class="hljs-string">4F</span> <span class="hljs-number">62</span> <span class="hljs-string">6A</span> <span class="hljs-number">65</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span>   <span class="hljs-string">java/lang/Object</span></code></pre></div></li></ul></li></ul><ul><li><p>访问标志（access_flags）</p><div class="hljs"><pre><code class="hljs plain">描述类或者接口的访问限权</code></pre></div></li><li><p>类索引（this_class）</p><div class="hljs"><pre><code class="hljs plain">为常量池中的某一项有效索引值</code></pre></div></li><li><p>父类索引（super_class)</p><div class="hljs"><pre><code class="hljs angelscript">要么是<span class="hljs-number">0</span> 要么是常量池中的有效索引值</code></pre></div></li><li><p>接口计数器（interfaces_count）</p><div class="hljs"><pre><code class="hljs plain">表示单当前类或接口的直接超接口数量</code></pre></div></li><li><p>接口表（interfaces[]）</p><div class="hljs"><pre><code class="hljs plain">每个成员必须是常量池中某项的有效索引值</code></pre></div></li><li><p>字段计数器（fields_count)</p><div class="hljs"><pre><code class="hljs angelscript">表示<span class="hljs-keyword">class</span>文件的<span class="hljs-symbol">fielda</span>表的个数</code></pre></div></li><li><p>字段表（fields[])</p><div class="hljs"><pre><code class="hljs plain">当前类或接口中的字段的完整描述，不包括从父类或父接口继承的字段</code></pre></div></li><li><p>方法计数器（methods_count)</p></li><li><p>方法表</p></li><li><p>属性计数器</p></li><li><p>属性表</p></li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>ASM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2020/07/19/Java/%E6%95%B0%E7%BB%84/"/>
    <url>/2020/07/19/Java/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 26 2020 10:02:29 GMT+0800 (CST) --><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote><p>数组在定义的时候必须确定其大小<br>如：</p></blockquote><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>[] A= new <span class="hljs-built_in">int</span>[<span class="hljs-number">100</span>];<span class="hljs-built_in">int</span>[] B=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);</code></pre></div><h2 id="在jvm内存分配中"><a href="#在jvm内存分配中" class="headerlink" title="在jvm内存分配中"></a>在jvm内存分配中</h2><ul><li>数组分配在堆中。</li><li>用其数组引用使用数组。</li><li>java的数组在使用的时候会检查是否越界，代价就是没有c，c++速度快。不过比c，c++安全。</li></ul><!-- rebuild by neat -->]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
